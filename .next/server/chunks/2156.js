"use strict";exports.id=2156,exports.ids=[2156],exports.modules={62156:(e,t,r)=>{r.d(t,{JK:()=>c});var i=r(31059),a=r(9487),s=r(47711);let o=new i.Z(process.env.STRIPE_SECRET_KEY,{apiVersion:"2025-06-30.basil"}),n={Free:{name:"Free Plan",price:0,priceId:"",maxProducts:20,maxAdSlots:0,customerSupport:!1,features:["Up to 20 products","Basic listing","Email notifications"]},Standard:{name:"Standard Plan",price:29,priceId:process.env.STRIPE_STANDARD_PRICE_ID||"price_standard",maxProducts:60,maxAdSlots:12,customerSupport:!0,features:["Up to 60 products","12 ad slots","Priority support","Cart reminders"]},Premium:{name:"Premium Plan",price:99,priceId:process.env.STRIPE_PREMIUM_PRICE_ID||"price_premium",maxProducts:-1,maxAdSlots:-1,customerSupport:!0,features:["Unlimited products","Unlimited ads","Premium support","Marketing emails","Advanced analytics"]}};class l{async createCheckoutSession(e,t,r,i){try{let s=await a.userDb.findById(e);if(!s)throw Error("User not found");let l=n[t];if(!l.priceId)throw Error(`Price ID not configured for ${t} plan`);let c=await this.getStripeCustomerId(e);c||(c=(await o.customers.create({email:s.email,metadata:{userId:e}})).id,await this.saveStripeCustomerId(e,c));let u=await o.checkout.sessions.create({customer:c,mode:"subscription",payment_method_types:["card"],line_items:[{price:l.priceId,quantity:1}],success_url:r,cancel_url:i,metadata:{userId:e,planTier:t}});if(!u.url)throw Error("Failed to create checkout session URL");return{sessionId:u.id,url:u.url}}catch(e){throw console.error("Failed to create checkout session:",e),e}}async handleWebhook(e,t){try{let r=process.env.STRIPE_WEBHOOK_SECRET;if(!r)throw Error("Stripe webhook secret not configured");let i=o.webhooks.constructEvent(e,t,r);switch(i.type){case"checkout.session.completed":await this.handleSubscriptionSuccess(i.data.object);break;case"customer.subscription.deleted":await this.handleSubscriptionCanceled(i.data.object);break;case"invoice.payment_failed":await this.handlePaymentFailed(i.data.object);break;default:console.log(`Unhandled event type: ${i.type}`)}return{success:!0,message:"Webhook processed successfully"}}catch(e){throw console.error("Webhook processing failed:",e),e}}async handleSubscriptionSuccess(e){try{let t=e.metadata?.userId,r=e.metadata?.planTier;if(!t||!r){console.error("Missing metadata in checkout session:",e.id);return}let i=await a.userDb.findById(t);if(!i){console.error("User not found for subscription:",t);return}await a.planDb.update(t,{tier:r,...n[r]});try{await s.yo.sendTransactionalEmail(s.qC.ORDER_NOTIFY_SELLER,{email:i.email},{orderId:`PLAN-${r}`,buyerEmail:i.email,totalPrice:n[r].price,itemCount:1,orderDate:new Date().toISOString(),products:`${r} Subscription Plan`})}catch(e){console.error("Failed to send plan upgrade confirmation email:",e)}console.log(`Successfully upgraded user ${t} to ${r} plan`)}catch(e){console.error("Failed to process subscription success:",e)}}async handleSubscriptionCanceled(e){try{let t=e.customer,r=await this.getUserIdByCustomerId(t);r&&(await a.planDb.update(r,{tier:"Free",...n.Free}),console.log(`Downgraded user ${r} to Free plan`))}catch(e){console.error("Failed to process subscription cancellation:",e)}}async handlePaymentFailed(e){try{let t=e.customer,r=await this.getUserIdByCustomerId(t);r&&await a.userDb.findById(r)&&console.log(`Payment failed for user ${r}, subscription may be canceled soon`)}catch(e){console.error("Failed to process payment failure:",e)}}async getStripeCustomerId(e){try{return(await a.planDb.get(e)).stripeCustomerId||null}catch(e){return console.error("Failed to get Stripe customer ID:",e),null}}async saveStripeCustomerId(e,t){try{await a.planDb.update(e,{stripeCustomerId:t})}catch(e){console.error("Failed to save Stripe customer ID:",e)}}async getUserIdByCustomerId(e){try{for(let t of(await a.userDb.getAll()))if((await a.planDb.get(t.id)).stripeCustomerId===e)return t.id;return null}catch(e){return console.error("Failed to find user by customer ID:",e),null}}async getCustomerPortalUrl(e,t){try{let r=await this.getStripeCustomerId(e);if(!r)throw Error("No Stripe customer found for user");return(await o.billingPortal.sessions.create({customer:r,return_url:t})).url}catch(e){throw console.error("Failed to create customer portal session:",e),e}}async getSubscriptionStatus(e){try{let t=await a.planDb.get(e),r=await this.getStripeCustomerId(e);if(!r||"Free"===t.tier)return{status:null,planTier:t.tier,cancelAtPeriodEnd:!1,currentPeriodEnd:null};let i=(await o.subscriptions.list({customer:r,status:"all",limit:1})).data[0];if(!i)return{status:null,planTier:t.tier,cancelAtPeriodEnd:!1,currentPeriodEnd:null};return{status:i.status,planTier:t.tier,cancelAtPeriodEnd:i.cancel_at_period_end,currentPeriodEnd:i.current_period_end?new Date(1e3*i.current_period_end):null}}catch(e){throw console.error("Failed to get subscription status:",e),e}}}let c=new l},47711:(e,t,r)=>{r.d(t,{qC:()=>a,yo:()=>o});var i=r(55245);let a={ORDER_NOTIFY_SELLER:"order_notify_seller",STATUS_NOTIFY_BUYER:"status_notify_buyer",ADMIN_ALERT_NEW_SELLER:"admin_alert_new_seller",CART_REMINDER_BUYER:"cart_reminder_buyer",OTP_EMAIL:"otp_email",MARKETING_EMAIL:"marketing_email"};class s{constructor(){this.smtpTransporter=null,this.useMailchimp=!1,this.mailchimpConfig={apiKey:process.env.MAILCHIMP_API_KEY,serverPrefix:process.env.MAILCHIMP_SERVER_PREFIX},this.useMailchimp=!!(this.mailchimpConfig.apiKey&&this.mailchimpConfig.serverPrefix),this.useMailchimp||this.initializeSMTP()}initializeSMTP(){try{let e={host:process.env.SMTP_HOST||"smtp.gmail.com",port:parseInt(process.env.SMTP_PORT||"587"),secure:"true"===process.env.SMTP_SECURE,auth:{user:process.env.SMTP_USER||"",pass:process.env.SMTP_PASS||""}};if(!e.auth.user||!e.auth.pass){console.warn("SMTP credentials not configured. Email functionality will be limited.");return}this.smtpTransporter=i.createTransporter(e)}catch(e){console.error("Failed to initialize SMTP transporter:",e)}}getEmailTemplate(e,t){switch(e){case a.ORDER_NOTIFY_SELLER:return{subject:`New Order #${t.orderId} - ${t.buyerEmail}`,html:`
            <h2>New Order Received</h2>
            <p>You have received a new order:</p>
            <ul>
              <li><strong>Order ID:</strong> ${t.orderId}</li>
              <li><strong>Buyer:</strong> ${t.buyerEmail}</li>
              <li><strong>Total:</strong> $${t.totalPrice}</li>
              <li><strong>Items:</strong> ${t.itemCount} items</li>
              <li><strong>Order Date:</strong> ${new Date(t.orderDate).toLocaleString()}</li>
            </ul>
            <p>Please review and process this order in your seller dashboard.</p>
          `,text:`New Order #${t.orderId} from ${t.buyerEmail}. Total: $${t.totalPrice}. Items: ${t.itemCount}`};case a.STATUS_NOTIFY_BUYER:return{subject:`Order Update - #${t.orderId}`,html:`
            <h2>Order Status Update</h2>
            <p>Your order status has been updated:</p>
            <ul>
              <li><strong>Order ID:</strong> ${t.orderId}</li>
              <li><strong>New Status:</strong> ${t.status}</li>
              <li><strong>Total:</strong> $${t.totalPrice}</li>
            </ul>
            ${t.trackingNumber?`<p><strong>Tracking Number:</strong> ${t.trackingNumber}</p>`:""}
            <p>You can view your order details in your account dashboard.</p>
          `,text:`Order #${t.orderId} status updated to: ${t.status}`};case a.ADMIN_ALERT_NEW_SELLER:return{subject:`New Seller Registration - ${t.companyName}`,html:`
            <h2>New Seller Registration</h2>
            <p>A new seller has registered and requires verification:</p>
            <ul>
              <li><strong>Company:</strong> ${t.companyName}</li>
              <li><strong>Email:</strong> ${t.email}</li>
              <li><strong>Registration Number:</strong> ${t.registrationNumber}</li>
              <li><strong>Submitted:</strong> ${new Date(t.submittedAt).toLocaleString()}</li>
            </ul>
            <p>Please review and verify this seller in the admin dashboard.</p>
          `,text:`New seller registration: ${t.companyName} (${t.email}) requires verification`};case a.CART_REMINDER_BUYER:return{subject:`Don't forget your cart - ${t.itemCount} items waiting`,html:`
            <h2>Your Cart is Waiting</h2>
            <p>You have ${t.itemCount} items in your cart that are ready to order:</p>
            <p><strong>Total Value:</strong> $${t.totalValue}</p>
            <p>Complete your purchase before these items are gone!</p>
            <a href="${t.cartUrl}" style="background-color: #007bff; color: white; padding: 10px 20px; text-decoration: none; border-radius: 5px;">View Cart</a>
          `,text:`You have ${t.itemCount} items in your cart worth $${t.totalValue}. Complete your purchase now!`};case a.OTP_EMAIL:return{subject:"Your verification code",html:`
            <h2>Email Verification</h2>
            <p>Your verification code is:</p>
            <h1 style="font-size: 32px; color: #007bff; letter-spacing: 5px;">${t.otp}</h1>
            <p>This code expires in 5 minutes.</p>
            <p><strong>Note:</strong> Do not share this code with anyone.</p>
          `,text:`Your verification code is: ${t.otp}. This code expires in 5 minutes.`};case a.MARKETING_EMAIL:return{subject:t.subject||"Special Offer",html:t.html||`
            <h2>${t.title||"Special Offer"}</h2>
            <p>${t.message||"Check out our latest deals!"}</p>
          `,text:t.text||t.message||"Check out our latest deals!"};default:throw Error(`Unknown email template: ${e}`)}}async subscribeToList(e,t){if(this.useMailchimp)try{let r=await fetch(`https://${this.mailchimpConfig.serverPrefix}.api.mailchimp.com/3.0/lists/${t}/members`,{method:"POST",headers:{Authorization:`Bearer ${this.mailchimpConfig.apiKey}`,"Content-Type":"application/json"},body:JSON.stringify({email_address:e,status:"subscribed"})});if(!r.ok){let e=await r.json();throw Error(`Mailchimp API error: ${e.detail||"Unknown error"}`)}}catch(e){throw console.error("Failed to subscribe to Mailchimp list:",e),e}else console.warn("Mailchimp not configured. Subscription skipped.")}async sendTransactionalEmail(e,t,r,i,a){try{if(i&&a&&!this.canSendEmailByPlan(i.tier,a)){console.log(`Skipped email to ${t.email} due to plan: ${i.tier} (type: ${a})`);return}let s=this.getEmailTemplate(e,r);if(this.useMailchimp)await this.sendViaMailchimp(s,t,r);else if(this.smtpTransporter)await this.sendViaSMTP(s,t);else throw console.error("No email service configured. Email not sent."),Error("Email service not available")}catch(r){throw console.error(`Failed to send email ${e} to ${t.email}:`,r),r}}canSendEmailByPlan(e,t){switch(e){case"Free":return"transactional"===t;case"Standard":return"transactional"===t||"cart"===t;case"Premium":return!0;default:return!1}}async sendViaMailchimp(e,t,r){try{let r=await fetch(`https://${this.mailchimpConfig.serverPrefix}.api.mailchimp.com/3.0/messages/send`,{method:"POST",headers:{Authorization:`Bearer ${this.mailchimpConfig.apiKey}`,"Content-Type":"application/json"},body:JSON.stringify({message:{html:e.html,text:e.text,subject:e.subject,from_email:process.env.FROM_EMAIL||"noreply@mshop.com",from_name:process.env.FROM_NAME||"mshop Marketplace",to:[{email:t.email,name:t.name,type:"to"}]}})});if(!r.ok){let e=await r.json();throw Error(`Mailchimp send error: ${e.message||"Unknown error"}`)}}catch(r){if(console.error("Mailchimp send failed, falling back to SMTP:",r),this.smtpTransporter)await this.sendViaSMTP(e,t);else throw r}}async sendViaSMTP(e,t){if(!this.smtpTransporter)throw Error("SMTP transporter not initialized");let r={from:`${process.env.FROM_NAME||"mshop Marketplace"} <${process.env.FROM_EMAIL||process.env.SMTP_USER}>`,to:t.email,subject:e.subject,html:e.html,text:e.text};await this.smtpTransporter.sendMail(r)}async testConnection(){let e={mailchimp:!1,smtp:!1};if(this.useMailchimp)try{let t=await fetch(`https://${this.mailchimpConfig.serverPrefix}.api.mailchimp.com/3.0/ping`,{headers:{Authorization:`Bearer ${this.mailchimpConfig.apiKey}`}});e.mailchimp=t.ok}catch(e){console.error("Mailchimp connection test failed:",e)}if(this.smtpTransporter)try{await this.smtpTransporter.verify(),e.smtp=!0}catch(e){console.error("SMTP connection test failed:",e)}return e}async sendAbandonedCartEmail(e,t,r){return this.sendTransactionalEmail(a.CART_REMINDER_BUYER,e,t,r,"cart")}}let o=new s}};