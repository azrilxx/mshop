"use strict";exports.id=2094,exports.ids=[2094],exports.modules={90455:(e,t,r)=>{r.d(t,{Gg:()=>o,MH:()=>l,PR:()=>c,SO:()=>n,ed:()=>a,mk:()=>s});var i=r(71615);async function a(e){let t={user:e,expires:new Date(Date.now()+6048e5).toISOString()};(0,i.cookies)().set("session",JSON.stringify(t),{httpOnly:!0,secure:!0,sameSite:"lax",maxAge:604800})}async function o(){let e=(0,i.cookies)().get("session");if(!e)return null;try{let t=JSON.parse(e.value);if(new Date(t.expires)<new Date)return await n(),null;return t}catch{return null}}async function n(){(0,i.cookies)().delete("session")}async function s(){let e=await o();if(!e)throw Error("Authentication required");return e.user}async function l(e){let t=await s();if(!e.includes(t.role))throw Error("Insufficient permissions");return t}async function c(){let e=await o();return e?.user||null}},47711:(e,t,r)=>{r.d(t,{qC:()=>a,yo:()=>n});var i=r(55245);let a={ORDER_NOTIFY_SELLER:"order_notify_seller",STATUS_NOTIFY_BUYER:"status_notify_buyer",ADMIN_ALERT_NEW_SELLER:"admin_alert_new_seller",CART_REMINDER_BUYER:"cart_reminder_buyer",OTP_EMAIL:"otp_email",MARKETING_EMAIL:"marketing_email"};class o{constructor(){this.smtpTransporter=null,this.useMailchimp=!1,this.mailchimpConfig={apiKey:process.env.MAILCHIMP_API_KEY,serverPrefix:process.env.MAILCHIMP_SERVER_PREFIX},this.useMailchimp=!!(this.mailchimpConfig.apiKey&&this.mailchimpConfig.serverPrefix),this.useMailchimp||this.initializeSMTP()}initializeSMTP(){try{let e={host:process.env.SMTP_HOST||"smtp.gmail.com",port:parseInt(process.env.SMTP_PORT||"587"),secure:"true"===process.env.SMTP_SECURE,auth:{user:process.env.SMTP_USER||"",pass:process.env.SMTP_PASS||""}};if(!e.auth.user||!e.auth.pass){console.warn("SMTP credentials not configured. Email functionality will be limited.");return}this.smtpTransporter=i.createTransporter(e)}catch(e){console.error("Failed to initialize SMTP transporter:",e)}}getEmailTemplate(e,t){switch(e){case a.ORDER_NOTIFY_SELLER:return{subject:`New Order #${t.orderId} - ${t.buyerEmail}`,html:`
            <h2>New Order Received</h2>
            <p>You have received a new order:</p>
            <ul>
              <li><strong>Order ID:</strong> ${t.orderId}</li>
              <li><strong>Buyer:</strong> ${t.buyerEmail}</li>
              <li><strong>Total:</strong> $${t.totalPrice}</li>
              <li><strong>Items:</strong> ${t.itemCount} items</li>
              <li><strong>Order Date:</strong> ${new Date(t.orderDate).toLocaleString()}</li>
            </ul>
            <p>Please review and process this order in your seller dashboard.</p>
          `,text:`New Order #${t.orderId} from ${t.buyerEmail}. Total: $${t.totalPrice}. Items: ${t.itemCount}`};case a.STATUS_NOTIFY_BUYER:return{subject:`Order Update - #${t.orderId}`,html:`
            <h2>Order Status Update</h2>
            <p>Your order status has been updated:</p>
            <ul>
              <li><strong>Order ID:</strong> ${t.orderId}</li>
              <li><strong>New Status:</strong> ${t.status}</li>
              <li><strong>Total:</strong> $${t.totalPrice}</li>
            </ul>
            ${t.trackingNumber?`<p><strong>Tracking Number:</strong> ${t.trackingNumber}</p>`:""}
            <p>You can view your order details in your account dashboard.</p>
          `,text:`Order #${t.orderId} status updated to: ${t.status}`};case a.ADMIN_ALERT_NEW_SELLER:return{subject:`New Seller Registration - ${t.companyName}`,html:`
            <h2>New Seller Registration</h2>
            <p>A new seller has registered and requires verification:</p>
            <ul>
              <li><strong>Company:</strong> ${t.companyName}</li>
              <li><strong>Email:</strong> ${t.email}</li>
              <li><strong>Registration Number:</strong> ${t.registrationNumber}</li>
              <li><strong>Submitted:</strong> ${new Date(t.submittedAt).toLocaleString()}</li>
            </ul>
            <p>Please review and verify this seller in the admin dashboard.</p>
          `,text:`New seller registration: ${t.companyName} (${t.email}) requires verification`};case a.CART_REMINDER_BUYER:return{subject:`Don't forget your cart - ${t.itemCount} items waiting`,html:`
            <h2>Your Cart is Waiting</h2>
            <p>You have ${t.itemCount} items in your cart that are ready to order:</p>
            <p><strong>Total Value:</strong> $${t.totalValue}</p>
            <p>Complete your purchase before these items are gone!</p>
            <a href="${t.cartUrl}" style="background-color: #007bff; color: white; padding: 10px 20px; text-decoration: none; border-radius: 5px;">View Cart</a>
          `,text:`You have ${t.itemCount} items in your cart worth $${t.totalValue}. Complete your purchase now!`};case a.OTP_EMAIL:return{subject:"Your verification code",html:`
            <h2>Email Verification</h2>
            <p>Your verification code is:</p>
            <h1 style="font-size: 32px; color: #007bff; letter-spacing: 5px;">${t.otp}</h1>
            <p>This code expires in 5 minutes.</p>
            <p><strong>Note:</strong> Do not share this code with anyone.</p>
          `,text:`Your verification code is: ${t.otp}. This code expires in 5 minutes.`};case a.MARKETING_EMAIL:return{subject:t.subject||"Special Offer",html:t.html||`
            <h2>${t.title||"Special Offer"}</h2>
            <p>${t.message||"Check out our latest deals!"}</p>
          `,text:t.text||t.message||"Check out our latest deals!"};default:throw Error(`Unknown email template: ${e}`)}}async subscribeToList(e,t){if(this.useMailchimp)try{let r=await fetch(`https://${this.mailchimpConfig.serverPrefix}.api.mailchimp.com/3.0/lists/${t}/members`,{method:"POST",headers:{Authorization:`Bearer ${this.mailchimpConfig.apiKey}`,"Content-Type":"application/json"},body:JSON.stringify({email_address:e,status:"subscribed"})});if(!r.ok){let e=await r.json();throw Error(`Mailchimp API error: ${e.detail||"Unknown error"}`)}}catch(e){throw console.error("Failed to subscribe to Mailchimp list:",e),e}else console.warn("Mailchimp not configured. Subscription skipped.")}async sendTransactionalEmail(e,t,r,i,a){try{if(i&&a&&!this.canSendEmailByPlan(i.tier,a)){console.log(`Skipped email to ${t.email} due to plan: ${i.tier} (type: ${a})`);return}let o=this.getEmailTemplate(e,r);if(this.useMailchimp)await this.sendViaMailchimp(o,t,r);else if(this.smtpTransporter)await this.sendViaSMTP(o,t);else throw console.error("No email service configured. Email not sent."),Error("Email service not available")}catch(r){throw console.error(`Failed to send email ${e} to ${t.email}:`,r),r}}canSendEmailByPlan(e,t){switch(e){case"Free":return"transactional"===t;case"Standard":return"transactional"===t||"cart"===t;case"Premium":return!0;default:return!1}}async sendViaMailchimp(e,t,r){try{let r=await fetch(`https://${this.mailchimpConfig.serverPrefix}.api.mailchimp.com/3.0/messages/send`,{method:"POST",headers:{Authorization:`Bearer ${this.mailchimpConfig.apiKey}`,"Content-Type":"application/json"},body:JSON.stringify({message:{html:e.html,text:e.text,subject:e.subject,from_email:process.env.FROM_EMAIL||"noreply@mshop.com",from_name:process.env.FROM_NAME||"mshop Marketplace",to:[{email:t.email,name:t.name,type:"to"}]}})});if(!r.ok){let e=await r.json();throw Error(`Mailchimp send error: ${e.message||"Unknown error"}`)}}catch(r){if(console.error("Mailchimp send failed, falling back to SMTP:",r),this.smtpTransporter)await this.sendViaSMTP(e,t);else throw r}}async sendViaSMTP(e,t){if(!this.smtpTransporter)throw Error("SMTP transporter not initialized");let r={from:`${process.env.FROM_NAME||"mshop Marketplace"} <${process.env.FROM_EMAIL||process.env.SMTP_USER}>`,to:t.email,subject:e.subject,html:e.html,text:e.text};await this.smtpTransporter.sendMail(r)}async testConnection(){let e={mailchimp:!1,smtp:!1};if(this.useMailchimp)try{let t=await fetch(`https://${this.mailchimpConfig.serverPrefix}.api.mailchimp.com/3.0/ping`,{headers:{Authorization:`Bearer ${this.mailchimpConfig.apiKey}`}});e.mailchimp=t.ok}catch(e){console.error("Mailchimp connection test failed:",e)}if(this.smtpTransporter)try{await this.smtpTransporter.verify(),e.smtp=!0}catch(e){console.error("SMTP connection test failed:",e)}return e}async sendAbandonedCartEmail(e,t,r){return this.sendTransactionalEmail(a.CART_REMINDER_BUYER,e,t,r,"cart")}}let n=new o},64717:(e,t,r)=>{r.d(t,{BF:()=>n});var i=r(47711),a=r(9487);class o{async canSendEmail(e,t,r){return e.email?"transactional"===r||("cart"===r?"Free"===t.tier?(console.log(`Skipped cart email - Free plan user ${e.id}`),!1):!1!==e.notifyStatus:"marketing"===r&&("Free"===t.tier?(console.log(`Skipped marketing email - Free plan user ${e.id}`),!1):!0===e.notifyMarketing)):(console.log(`Skipped email - missing email for user ${e.id}`),!1)}async notifyOrderPlaced(e){try{let t=await a.userDb.findById(e.buyerId);if(!t){console.error(`Order notification failed - buyer not found: ${e.buyerId}`);return}let r=new Set,o=(await Promise.all(e.productIds.map(async e=>{let t=await a.productDb.findById(e);return t&&r.add(t.merchantId),t}))).filter(Boolean);for(let n of r){let r=await a.userDb.findById(n);if(!r){console.error(`Seller not found for notification: ${n}`);continue}let s=await a.planDb.get(n);if(!await this.canSendEmail(r,s,"transactional"))continue;let l=o.filter(e=>e.merchantId===n),c=e.productIds.filter(e=>l.some(t=>t.id===e)).length;try{await i.yo.sendTransactionalEmail(i.qC.ORDER_NOTIFY_SELLER,{email:r.email},{orderId:e.id,buyerEmail:t.email,totalPrice:e.totalPrice,itemCount:c,orderDate:e.createdAt,products:l.map(e=>e.name).join(", ")},s,"transactional"),console.log(`Order notification sent to seller ${r.email} for order ${e.id}`)}catch(e){console.error(`Failed to send order notification to seller ${r.email}:`,e)}}}catch(e){console.error("Error in notifyOrderPlaced:",e)}}async notifyOrderStatusUpdate(e,t){try{let r=await a.userDb.findById(e.buyerId);if(!r){console.error(`Status update notification failed - buyer not found: ${e.buyerId}`);return}let o=await a.planDb.get(e.buyerId);if(!await this.canSendEmail(r,o,"transactional"))return;if(!r.notifyStatus){console.log(`Skipped status update email - user ${r.id} has notifications disabled`);return}try{await i.yo.sendTransactionalEmail(i.qC.STATUS_NOTIFY_BUYER,{email:r.email},{orderId:e.id,status:e.status,oldStatus:t,totalPrice:e.totalPrice,trackingNumber:e.shipmentStatus},o,"transactional"),console.log(`Status update notification sent to buyer ${r.email} for order ${e.id}`)}catch(e){console.error(`Failed to send status update notification to buyer ${r.email}:`,e)}}catch(e){console.error("Error in notifyOrderStatusUpdate:",e)}}async notifyNewSellerRegistration(e){try{for(let t of(await a.userDb.getAll()).filter(e=>"admin"===e.role)){let r=await a.planDb.get(t.id);if(await this.canSendEmail(t,r,"transactional"))try{await i.yo.sendTransactionalEmail(i.qC.ADMIN_ALERT_NEW_SELLER,{email:t.email},{companyName:e.email,email:e.email,registrationNumber:"Pending verification",submittedAt:e.createdAt},r,"transactional"),console.log(`New seller notification sent to admin ${t.email}`)}catch(e){console.error(`Failed to send new seller notification to admin ${t.email}:`,e)}}}catch(e){console.error("Error in notifyNewSellerRegistration:",e)}}async sendAbandonedCartReminder(e){try{let t=await a.userDb.findById(e);if(!t){console.error(`Abandoned cart reminder failed - user not found: ${e}`);return}let r=await a.planDb.get(e);if(!await this.canSendEmail(t,r,"cart"))return;if(t.cartNotifiedAt){let r=new Date(t.cartNotifiedAt),i=new Date(Date.now()-432e5);if(r>i){console.log(`Skipped cart reminder - already sent within 12 hours for user ${e}`);return}}let o=await a.cartDb.get(e);if(!o.items||0===o.items.length){console.log(`Skipped cart reminder - empty cart for user ${e}`);return}let n=0;for(let e of o.items){let t=await a.productDb.findById(e.productId);t&&(n+=t.price*e.quantity)}try{await i.yo.sendAbandonedCartEmail({email:t.email},{itemCount:o.items.length,totalValue:n.toFixed(2),cartUrl:"https://shop.muvonenergy.com/cart"},r),t.cartNotifiedAt=new Date().toISOString(),await a.userDb.updateUser(t.email,{cartNotifiedAt:t.cartNotifiedAt}),console.log(`Abandoned cart reminder sent to ${t.email}`)}catch(e){console.error(`Failed to send abandoned cart reminder to ${t.email}:`,e)}}catch(e){console.error("Error in sendAbandonedCartReminder:",e)}}async sendMarketingEmail(e,t,r,o){try{let n=await a.userDb.findById(e);if(!n){console.error(`Marketing email failed - user not found: ${e}`);return}let s=await a.planDb.get(e);if(!await this.canSendEmail(n,s,"marketing"))return;try{await i.yo.sendTransactionalEmail(i.qC.MARKETING_EMAIL,{email:n.email},{subject:t,message:r,html:o,title:t},s,"marketing"),console.log(`Marketing email sent to ${n.email}`)}catch(e){console.error(`Failed to send marketing email to ${n.email}:`,e)}}catch(e){console.error("Error in sendMarketingEmail:",e)}}async processAbandonedCarts(){try{let e=await a.cartDb.getAbandonedCarts();for(let{userId:t}of(console.log(`Processing ${e.length} abandoned carts`),e))await this.sendAbandonedCartReminder(t),await new Promise(e=>setTimeout(e,100))}catch(e){console.error("Error processing abandoned carts:",e)}}async testEmailConnection(){return await i.yo.testConnection()}}let n=new o}};