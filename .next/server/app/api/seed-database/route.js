"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "app/api/seed-database/route";
exports.ids = ["app/api/seed-database/route"];
exports.modules = {

/***/ "next/dist/compiled/next-server/app-page.runtime.dev.js":
/*!*************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-page.runtime.dev.js" ***!
  \*************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/compiled/next-server/app-page.runtime.dev.js");

/***/ }),

/***/ "next/dist/compiled/next-server/app-route.runtime.dev.js":
/*!**************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-route.runtime.dev.js" ***!
  \**************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/compiled/next-server/app-route.runtime.dev.js");

/***/ }),

/***/ "fs":
/*!*********************!*\
  !*** external "fs" ***!
  \*********************/
/***/ ((module) => {

module.exports = require("fs");

/***/ }),

/***/ "http":
/*!***********************!*\
  !*** external "http" ***!
  \***********************/
/***/ ((module) => {

module.exports = require("http");

/***/ }),

/***/ "https":
/*!************************!*\
  !*** external "https" ***!
  \************************/
/***/ ((module) => {

module.exports = require("https");

/***/ }),

/***/ "punycode":
/*!***************************!*\
  !*** external "punycode" ***!
  \***************************/
/***/ ((module) => {

module.exports = require("punycode");

/***/ }),

/***/ "stream":
/*!*************************!*\
  !*** external "stream" ***!
  \*************************/
/***/ ((module) => {

module.exports = require("stream");

/***/ }),

/***/ "url":
/*!**********************!*\
  !*** external "url" ***!
  \**********************/
/***/ ((module) => {

module.exports = require("url");

/***/ }),

/***/ "zlib":
/*!***********************!*\
  !*** external "zlib" ***!
  \***********************/
/***/ ((module) => {

module.exports = require("zlib");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fseed-database%2Froute&page=%2Fapi%2Fseed-database%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fseed-database%2Froute.ts&appDir=%2Fhome%2Frunner%2Fworkspace%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2Fhome%2Frunner%2Fworkspace&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!":

  !*** ./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fseed-database%2Froute&page=%2Fapi%2Fseed-database%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fseed-database%2Froute.ts&appDir=%2Fhome%2Frunner%2Fworkspace%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2Fhome%2Frunner%2Fworkspace&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D! ***!
  \***************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   originalPathname: () => (/* binding */ originalPathname),\n/* harmony export */   patchFetch: () => (/* binding */ patchFetch),\n/* harmony export */   requestAsyncStorage: () => (/* binding */ requestAsyncStorage),\n/* harmony export */   routeModule: () => (/* binding */ routeModule),\n/* harmony export */   serverHooks: () => (/* binding */ serverHooks),\n/* harmony export */   staticGenerationAsyncStorage: () => (/* binding */ staticGenerationAsyncStorage)\n/* harmony export */ });\n/* harmony import */ var next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/server/future/route-modules/app-route/module.compiled */ \"(rsc)/./node_modules/next/dist/server/future/route-modules/app-route/module.compiled.js\");\n/* harmony import */ var next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/dist/server/future/route-kind */ \"(rsc)/./node_modules/next/dist/server/future/route-kind.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/dist/server/lib/patch-fetch */ \"(rsc)/./node_modules/next/dist/server/lib/patch-fetch.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var _home_runner_workspace_app_api_seed_database_route_ts__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./app/api/seed-database/route.ts */ \"(rsc)/./app/api/seed-database/route.ts\");\n\n\n\n\n// We inject the nextConfigOutput here so that we can use them in the route\n// module.\nconst nextConfigOutput = \"\"\nconst routeModule = new next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__.AppRouteRouteModule({\n    definition: {\n        kind: next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__.RouteKind.APP_ROUTE,\n        page: \"/api/seed-database/route\",\n        pathname: \"/api/seed-database\",\n        filename: \"route\",\n        bundlePath: \"app/api/seed-database/route\"\n    },\n    resolvedPagePath: \"/home/runner/workspace/app/api/seed-database/route.ts\",\n    nextConfigOutput,\n    userland: _home_runner_workspace_app_api_seed_database_route_ts__WEBPACK_IMPORTED_MODULE_3__\n});\n// Pull out the exports that we need to expose from the module. This should\n// be eliminated when we've moved the other routes to the new format. These\n// are used to hook into the route.\nconst { requestAsyncStorage, staticGenerationAsyncStorage, serverHooks } = routeModule;\nconst originalPathname = \"/api/seed-database/route\";\nfunction patchFetch() {\n    return (0,next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__.patchFetch)({\n        serverHooks,\n        staticGenerationAsyncStorage\n    });\n}\n\n\n//# sourceMappingURL=app-route.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2J1aWxkL3dlYnBhY2svbG9hZGVycy9uZXh0LWFwcC1sb2FkZXIuanM/bmFtZT1hcHAlMkZhcGklMkZzZWVkLWRhdGFiYXNlJTJGcm91dGUmcGFnZT0lMkZhcGklMkZzZWVkLWRhdGFiYXNlJTJGcm91dGUmYXBwUGF0aHM9JnBhZ2VQYXRoPXByaXZhdGUtbmV4dC1hcHAtZGlyJTJGYXBpJTJGc2VlZC1kYXRhYmFzZSUyRnJvdXRlLnRzJmFwcERpcj0lMkZob21lJTJGcnVubmVyJTJGd29ya3NwYWNlJTJGYXBwJnBhZ2VFeHRlbnNpb25zPXRzeCZwYWdlRXh0ZW5zaW9ucz10cyZwYWdlRXh0ZW5zaW9ucz1qc3gmcGFnZUV4dGVuc2lvbnM9anMmcm9vdERpcj0lMkZob21lJTJGcnVubmVyJTJGd29ya3NwYWNlJmlzRGV2PXRydWUmdHNjb25maWdQYXRoPXRzY29uZmlnLmpzb24mYmFzZVBhdGg9JmFzc2V0UHJlZml4PSZuZXh0Q29uZmlnT3V0cHV0PSZwcmVmZXJyZWRSZWdpb249Jm1pZGRsZXdhcmVDb25maWc9ZTMwJTNEISIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7QUFBc0c7QUFDdkM7QUFDYztBQUNLO0FBQ2xGO0FBQ0E7QUFDQTtBQUNBLHdCQUF3QixnSEFBbUI7QUFDM0M7QUFDQSxjQUFjLHlFQUFTO0FBQ3ZCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQSxZQUFZO0FBQ1osQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBLFFBQVEsaUVBQWlFO0FBQ3pFO0FBQ0E7QUFDQSxXQUFXLDRFQUFXO0FBQ3RCO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDdUg7O0FBRXZIIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vb2d4LXNhYXMtbXZwLz84NmNmIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEFwcFJvdXRlUm91dGVNb2R1bGUgfSBmcm9tIFwibmV4dC9kaXN0L3NlcnZlci9mdXR1cmUvcm91dGUtbW9kdWxlcy9hcHAtcm91dGUvbW9kdWxlLmNvbXBpbGVkXCI7XG5pbXBvcnQgeyBSb3V0ZUtpbmQgfSBmcm9tIFwibmV4dC9kaXN0L3NlcnZlci9mdXR1cmUvcm91dGUta2luZFwiO1xuaW1wb3J0IHsgcGF0Y2hGZXRjaCBhcyBfcGF0Y2hGZXRjaCB9IGZyb20gXCJuZXh0L2Rpc3Qvc2VydmVyL2xpYi9wYXRjaC1mZXRjaFwiO1xuaW1wb3J0ICogYXMgdXNlcmxhbmQgZnJvbSBcIi9ob21lL3J1bm5lci93b3Jrc3BhY2UvYXBwL2FwaS9zZWVkLWRhdGFiYXNlL3JvdXRlLnRzXCI7XG4vLyBXZSBpbmplY3QgdGhlIG5leHRDb25maWdPdXRwdXQgaGVyZSBzbyB0aGF0IHdlIGNhbiB1c2UgdGhlbSBpbiB0aGUgcm91dGVcbi8vIG1vZHVsZS5cbmNvbnN0IG5leHRDb25maWdPdXRwdXQgPSBcIlwiXG5jb25zdCByb3V0ZU1vZHVsZSA9IG5ldyBBcHBSb3V0ZVJvdXRlTW9kdWxlKHtcbiAgICBkZWZpbml0aW9uOiB7XG4gICAgICAgIGtpbmQ6IFJvdXRlS2luZC5BUFBfUk9VVEUsXG4gICAgICAgIHBhZ2U6IFwiL2FwaS9zZWVkLWRhdGFiYXNlL3JvdXRlXCIsXG4gICAgICAgIHBhdGhuYW1lOiBcIi9hcGkvc2VlZC1kYXRhYmFzZVwiLFxuICAgICAgICBmaWxlbmFtZTogXCJyb3V0ZVwiLFxuICAgICAgICBidW5kbGVQYXRoOiBcImFwcC9hcGkvc2VlZC1kYXRhYmFzZS9yb3V0ZVwiXG4gICAgfSxcbiAgICByZXNvbHZlZFBhZ2VQYXRoOiBcIi9ob21lL3J1bm5lci93b3Jrc3BhY2UvYXBwL2FwaS9zZWVkLWRhdGFiYXNlL3JvdXRlLnRzXCIsXG4gICAgbmV4dENvbmZpZ091dHB1dCxcbiAgICB1c2VybGFuZFxufSk7XG4vLyBQdWxsIG91dCB0aGUgZXhwb3J0cyB0aGF0IHdlIG5lZWQgdG8gZXhwb3NlIGZyb20gdGhlIG1vZHVsZS4gVGhpcyBzaG91bGRcbi8vIGJlIGVsaW1pbmF0ZWQgd2hlbiB3ZSd2ZSBtb3ZlZCB0aGUgb3RoZXIgcm91dGVzIHRvIHRoZSBuZXcgZm9ybWF0LiBUaGVzZVxuLy8gYXJlIHVzZWQgdG8gaG9vayBpbnRvIHRoZSByb3V0ZS5cbmNvbnN0IHsgcmVxdWVzdEFzeW5jU3RvcmFnZSwgc3RhdGljR2VuZXJhdGlvbkFzeW5jU3RvcmFnZSwgc2VydmVySG9va3MgfSA9IHJvdXRlTW9kdWxlO1xuY29uc3Qgb3JpZ2luYWxQYXRobmFtZSA9IFwiL2FwaS9zZWVkLWRhdGFiYXNlL3JvdXRlXCI7XG5mdW5jdGlvbiBwYXRjaEZldGNoKCkge1xuICAgIHJldHVybiBfcGF0Y2hGZXRjaCh7XG4gICAgICAgIHNlcnZlckhvb2tzLFxuICAgICAgICBzdGF0aWNHZW5lcmF0aW9uQXN5bmNTdG9yYWdlXG4gICAgfSk7XG59XG5leHBvcnQgeyByb3V0ZU1vZHVsZSwgcmVxdWVzdEFzeW5jU3RvcmFnZSwgc3RhdGljR2VuZXJhdGlvbkFzeW5jU3RvcmFnZSwgc2VydmVySG9va3MsIG9yaWdpbmFsUGF0aG5hbWUsIHBhdGNoRmV0Y2gsICB9O1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1hcHAtcm91dGUuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fseed-database%2Froute&page=%2Fapi%2Fseed-database%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fseed-database%2Froute.ts&appDir=%2Fhome%2Frunner%2Fworkspace%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2Fhome%2Frunner%2Fworkspace&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!\n");

/***/ }),

/***/ "(rsc)/./app/api/seed-database/route.ts":
/*!****************************************!*\
  !*** ./app/api/seed-database/route.ts ***!
  \****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   GET: () => (/* binding */ GET),\n/* harmony export */   POST: () => (/* binding */ POST)\n/* harmony export */ });\n/* harmony import */ var _scripts_init_database__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../scripts/init-database */ \"(rsc)/./scripts/init-database.ts\");\n\nasync function POST() {\n    try {\n        await (0,_scripts_init_database__WEBPACK_IMPORTED_MODULE_0__[\"default\"])();\n        return Response.json({\n            message: \"Database seeded successfully\"\n        });\n    } catch (error) {\n        console.error(\"Seeding error:\", error);\n        return Response.json({\n            error: error.message\n        }, {\n            status: 500\n        });\n    }\n}\nasync function GET() {\n    return Response.json({\n        message: \"Database seeding endpoint. Use POST to seed database.\"\n    });\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9hcHAvYXBpL3NlZWQtZGF0YWJhc2Uvcm91dGUudHMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQ3lEO0FBRWxELGVBQWVDO0lBQ3BCLElBQUk7UUFDRixNQUFNRCxrRUFBWUE7UUFDbEIsT0FBT0UsU0FBU0MsSUFBSSxDQUFDO1lBQUVDLFNBQVM7UUFBK0I7SUFDakUsRUFBRSxPQUFPQyxPQUFZO1FBQ25CQyxRQUFRRCxLQUFLLENBQUMsa0JBQWtCQTtRQUNoQyxPQUFPSCxTQUFTQyxJQUFJLENBQUM7WUFBRUUsT0FBT0EsTUFBTUQsT0FBTztRQUFDLEdBQUc7WUFBRUcsUUFBUTtRQUFJO0lBQy9EO0FBQ0Y7QUFFTyxlQUFlQztJQUNwQixPQUFPTixTQUFTQyxJQUFJLENBQUM7UUFDbkJDLFNBQVM7SUFDWDtBQUNGIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vb2d4LXNhYXMtbXZwLy4vYXBwL2FwaS9zZWVkLWRhdGFiYXNlL3JvdXRlLnRzPzE2ZGEiXSwic291cmNlc0NvbnRlbnQiOlsiXG5pbXBvcnQgaW5pdERhdGFiYXNlIGZyb20gJy4uLy4uLy4uL3NjcmlwdHMvaW5pdC1kYXRhYmFzZSdcblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIFBPU1QoKSB7XG4gIHRyeSB7XG4gICAgYXdhaXQgaW5pdERhdGFiYXNlKClcbiAgICByZXR1cm4gUmVzcG9uc2UuanNvbih7IG1lc3NhZ2U6ICdEYXRhYmFzZSBzZWVkZWQgc3VjY2Vzc2Z1bGx5JyB9KVxuICB9IGNhdGNoIChlcnJvcjogYW55KSB7XG4gICAgY29uc29sZS5lcnJvcignU2VlZGluZyBlcnJvcjonLCBlcnJvcilcbiAgICByZXR1cm4gUmVzcG9uc2UuanNvbih7IGVycm9yOiBlcnJvci5tZXNzYWdlIH0sIHsgc3RhdHVzOiA1MDAgfSlcbiAgfVxufVxuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gR0VUKCkge1xuICByZXR1cm4gUmVzcG9uc2UuanNvbih7IFxuICAgIG1lc3NhZ2U6ICdEYXRhYmFzZSBzZWVkaW5nIGVuZHBvaW50LiBVc2UgUE9TVCB0byBzZWVkIGRhdGFiYXNlLicgXG4gIH0pXG59XG4iXSwibmFtZXMiOlsiaW5pdERhdGFiYXNlIiwiUE9TVCIsIlJlc3BvbnNlIiwianNvbiIsIm1lc3NhZ2UiLCJlcnJvciIsImNvbnNvbGUiLCJzdGF0dXMiLCJHRVQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./app/api/seed-database/route.ts\n");

/***/ }),

/***/ "(rsc)/./lib/db.ts":
/*!*******************!*\
  !*** ./lib/db.ts ***!
  \*******************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DatabaseOperations: () => (/* binding */ DatabaseOperations),\n/* harmony export */   dbOps: () => (/* binding */ dbOps)\n/* harmony export */ });\n// Fix for server-side usage of @replit/database\nlet Database;\nlet db;\nif (true) {\n    // Server-side: dynamically import and handle fetch polyfill\n    try {\n        if (!global.fetch) {\n            global.fetch = __webpack_require__(/*! node-fetch */ \"(rsc)/./node_modules/node-fetch/lib/index.mjs\");\n        }\n        Database = __webpack_require__(/*! @replit/database */ \"(rsc)/./node_modules/@replit/database/index.js\");\n        db = new Database();\n    } catch (error) {\n        console.error(\"Failed to initialize Replit Database:\", error);\n        // Fallback to mock implementation for development\n        db = {\n            get: async (key)=>null,\n            set: async (key, value)=>{},\n            delete: async (key)=>{},\n            list: async (prefix)=>[]\n        };\n    }\n} else {}\nclass DatabaseOperations {\n    // Security middleware - Row Level Security equivalent\n    async checkUserAccess(userId, resourceOwnerId, userRole) {\n        // Admin bypass\n        if (userRole === \"admin\") return true;\n        // User can access their own resources\n        return userId === resourceOwnerId;\n    }\n    async safeGet(key) {\n        try {\n            const result = await db.get(key);\n            return result || null;\n        } catch (error) {\n            console.error(`Database get error for key ${key}:`, error);\n            return null;\n        }\n    }\n    async safeSet(key, value) {\n        try {\n            await db.set(key, value);\n        } catch (error) {\n            console.error(`Database set error for key ${key}:`, error);\n            throw error;\n        }\n    }\n    async buildIndexes() {\n        try {\n            // Build product indexes by merchant_id\n            const products = await this.getAllFromTable(\"products\");\n            const productsByMerchant = new Map();\n            products.forEach((product)=>{\n                if (!productsByMerchant.has(product.seller_id)) {\n                    productsByMerchant.set(product.seller_id, []);\n                }\n                productsByMerchant.get(product.seller_id)?.push(product.id);\n            });\n            this.productIndexes = productsByMerchant;\n            // Build order indexes\n            const orders = await this.getAllFromTable(\"orders\");\n            const ordersByBuyer = new Map();\n            const ordersBySeller = new Map();\n            orders.forEach((order)=>{\n                if (!ordersByBuyer.has(order.buyer_id)) {\n                    ordersByBuyer.set(order.buyer_id, []);\n                }\n                if (!ordersBySeller.has(order.seller_id)) {\n                    ordersBySeller.set(order.seller_id, []);\n                }\n                ordersByBuyer.get(order.buyer_id)?.push(order.id);\n                ordersBySeller.get(order.seller_id)?.push(order.id);\n            });\n            this.orderIndexes = new Map([\n                ...ordersByBuyer,\n                ...ordersBySeller\n            ]);\n            // Build rating indexes by product_id\n            const ratings = await this.getAllFromTable(\"ratings\");\n            const ratingsByProduct = new Map();\n            ratings.forEach((rating)=>{\n                if (!ratingsByProduct.has(rating.product_id)) {\n                    ratingsByProduct.set(rating.product_id, []);\n                }\n                ratingsByProduct.get(rating.product_id)?.push(rating.id);\n            });\n            this.ratingIndexes = ratingsByProduct;\n        } catch (error) {\n            console.error(\"Error building indexes:\", error);\n        }\n    }\n    async getAllFromTable(tableName) {\n        try {\n            const data = await this.safeGet(tableName);\n            return Array.isArray(data) ? data : [];\n        } catch (error) {\n            console.error(`Error fetching from table ${tableName}:`, error);\n            return [];\n        }\n    }\n    async addToTable(tableName, item) {\n        try {\n            const existingData = await this.getAllFromTable(tableName);\n            existingData.push(item);\n            await this.safeSet(tableName, existingData);\n        } catch (error) {\n            console.error(`Error adding to table ${tableName}:`, error);\n            throw error;\n        }\n    }\n    async updateInTable(tableName, id, updates) {\n        try {\n            const existingData = await this.getAllFromTable(tableName);\n            const index = existingData.findIndex((item)=>item.id === id);\n            if (index !== -1) {\n                existingData[index] = {\n                    ...existingData[index],\n                    ...updates\n                };\n                await this.safeSet(tableName, existingData);\n            }\n        } catch (error) {\n            console.error(`Error updating in table ${tableName}:`, error);\n            throw error;\n        }\n    }\n    async removeFromTable(tableName, id) {\n        try {\n            const existingData = await this.getAllFromTable(tableName);\n            const filteredData = existingData.filter((item)=>item.id !== id);\n            await this.safeSet(tableName, filteredData);\n        } catch (error) {\n            console.error(`Error removing from table ${tableName}:`, error);\n            throw error;\n        }\n    }\n    // User operations with security checks\n    async createUser(user) {\n        // Validate required fields\n        if (!user.email || !user.name || !user.role) {\n            throw new Error(\"Missing required user fields\");\n        }\n        await this.addToTable(\"users\", user);\n    }\n    async getUserByEmail(email) {\n        const users = await this.getAllFromTable(\"users\");\n        return users.find((user)=>user.email === email) || null;\n    }\n    async getUserById(id, requestingUserId, requestingUserRole) {\n        const users = await this.getAllFromTable(\"users\");\n        const user = users.find((user)=>user.id === id) || null;\n        // Security check - users can only access their own profile unless admin\n        if (user && requestingUserId && !await this.checkUserAccess(requestingUserId, user.id, requestingUserRole)) {\n            return null;\n        }\n        return user;\n    }\n    async updateUser(id, updates, requestingUserId, requestingUserRole) {\n        // Security check\n        if (requestingUserId && !await this.checkUserAccess(requestingUserId, id, requestingUserRole)) {\n            throw new Error(\"Unauthorized access\");\n        }\n        await this.updateInTable(\"users\", id, updates);\n    }\n    // Product operations with security and performance optimization\n    async getProducts(requestingUserId, requestingUserRole) {\n        const products = await this.getAllFromTable(\"products\");\n        // If not admin, only return active products or user's own products\n        if (requestingUserRole !== \"admin\") {\n            return products.filter((product)=>product.status === \"active\" || requestingUserId && product.seller_id === requestingUserId);\n        }\n        return products;\n    }\n    async getProductsBySeller(sellerId, requestingUserId, requestingUserRole) {\n        // Security check - users can only access their own products unless admin\n        if (requestingUserId && !await this.checkUserAccess(requestingUserId, sellerId, requestingUserRole)) {\n            throw new Error(\"Unauthorized access\");\n        }\n        // Use index if available for performance\n        await this.buildIndexes();\n        const productIds = this.productIndexes.get(sellerId) || [];\n        const allProducts = await this.getProducts();\n        return allProducts.filter((product)=>productIds.includes(product.id));\n    }\n    async getProductById(id, requestingUserId, requestingUserRole) {\n        const products = await this.getProducts();\n        const product = products.find((product)=>product.id === id) || null;\n        // Security check - non-active products only visible to owner or admin\n        if (product && product.status !== \"active\" && requestingUserId) {\n            if (!await this.checkUserAccess(requestingUserId, product.seller_id, requestingUserRole)) {\n                return null;\n            }\n        }\n        return product;\n    }\n    async createProduct(product, requestingUserId) {\n        // Validate required fields\n        if (!product.name || !product.price || !product.seller_id) {\n            throw new Error(\"Missing required product fields\");\n        }\n        // Security check - users can only create products for themselves\n        if (product.seller_id !== requestingUserId) {\n            throw new Error(\"Unauthorized: Cannot create product for another user\");\n        }\n        await this.addToTable(\"products\", product);\n        // Update indexes\n        await this.buildIndexes();\n    }\n    async updateProduct(id, updates, requestingUserId, requestingUserRole) {\n        const product = await this.getProductById(id);\n        if (!product) {\n            throw new Error(\"Product not found\");\n        }\n        // Security check\n        if (!await this.checkUserAccess(requestingUserId, product.seller_id, requestingUserRole)) {\n            throw new Error(\"Unauthorized access\");\n        }\n        await this.updateInTable(\"products\", id, updates);\n    }\n    // Advertisement operations with security checks\n    async getAdvertisements(requestingUserId, requestingUserRole) {\n        const ads = await this.getAllFromTable(\"advertisements\");\n        // If not admin, only return user's own ads or active public ads\n        if (requestingUserRole !== \"admin\") {\n            return ads.filter((ad)=>ad.seller_id === requestingUserId || ad.status === \"active\" && new Date(ad.active_from) <= new Date() && new Date(ad.active_until) >= new Date());\n        }\n        return ads;\n    }\n    async getActiveAdvertisements() {\n        const ads = await this.getAdvertisements();\n        const now = new Date().toISOString();\n        return ads.filter((ad)=>ad.status === \"active\" && ad.active_from <= now && ad.active_until >= now);\n    }\n    async getAdvertisementsBySeller(sellerId, requestingUserId, requestingUserRole) {\n        // Security check\n        if (!await this.checkUserAccess(requestingUserId, sellerId, requestingUserRole)) {\n            throw new Error(\"Unauthorized access\");\n        }\n        const ads = await this.getAdvertisements();\n        return ads.filter((ad)=>ad.seller_id === sellerId);\n    }\n    async createAdvertisement(ad, requestingUserId) {\n        // Validate required fields\n        if (!ad.seller_id || !ad.title || !ad.active_from || !ad.active_until) {\n            throw new Error(\"Missing required advertisement fields\");\n        }\n        // Security check\n        if (ad.seller_id !== requestingUserId) {\n            throw new Error(\"Unauthorized: Cannot create advertisement for another user\");\n        }\n        await this.addToTable(\"advertisements\", ad);\n    }\n    async updateAdvertisement(id, updates, requestingUserId, requestingUserRole) {\n        const ads = await this.getAllFromTable(\"advertisements\");\n        const ad = ads.find((a)=>a.id === id);\n        if (!ad) {\n            throw new Error(\"Advertisement not found\");\n        }\n        // Security check\n        if (!await this.checkUserAccess(requestingUserId, ad.seller_id, requestingUserRole)) {\n            throw new Error(\"Unauthorized access\");\n        }\n        await this.updateInTable(\"advertisements\", id, updates);\n    }\n    // Order operations with security and performance optimization\n    async getOrders(requestingUserId, requestingUserRole) {\n        const orders = await this.getAllFromTable(\"orders\");\n        // Security: only admins can see all orders\n        if (requestingUserRole === \"admin\") {\n            return orders;\n        }\n        // Users can only see their own orders (as buyer or seller)\n        return orders.filter((order)=>order.buyer_id === requestingUserId || order.seller_id === requestingUserId);\n    }\n    async getOrdersBySeller(sellerId, requestingUserId, requestingUserRole) {\n        // Security check\n        if (!await this.checkUserAccess(requestingUserId, sellerId, requestingUserRole)) {\n            throw new Error(\"Unauthorized access\");\n        }\n        // Use index for performance\n        await this.buildIndexes();\n        const orderIds = this.orderIndexes.get(sellerId) || [];\n        const allOrders = await this.getAllFromTable(\"orders\");\n        return allOrders.filter((order)=>orderIds.includes(order.id) && order.seller_id === sellerId);\n    }\n    async getOrdersByBuyer(buyerId, requestingUserId, requestingUserRole) {\n        // Security check\n        if (!await this.checkUserAccess(requestingUserId, buyerId, requestingUserRole)) {\n            throw new Error(\"Unauthorized access\");\n        }\n        // Use index for performance\n        await this.buildIndexes();\n        const orderIds = this.orderIndexes.get(buyerId) || [];\n        const allOrders = await this.getAllFromTable(\"orders\");\n        return allOrders.filter((order)=>orderIds.includes(order.id) && order.buyer_id === buyerId);\n    }\n    async createOrder(order, requestingUserId) {\n        // Validate required fields\n        if (!order.buyer_id || !order.seller_id || !order.product_id || !order.total_price) {\n            throw new Error(\"Missing required order fields\");\n        }\n        // Security check - users can only create orders as buyers\n        if (order.buyer_id !== requestingUserId) {\n            throw new Error(\"Unauthorized: Cannot create order for another user\");\n        }\n        await this.addToTable(\"orders\", order);\n        // Update indexes\n        await this.buildIndexes();\n    }\n    async updateOrder(id, updates, requestingUserId, requestingUserRole) {\n        const orders = await this.getAllFromTable(\"orders\");\n        const order = orders.find((o)=>o.id === id);\n        if (!order) {\n            throw new Error(\"Order not found\");\n        }\n        // Security check - buyers and sellers can update their orders\n        const canAccess = order.buyer_id === requestingUserId || order.seller_id === requestingUserId || requestingUserRole === \"admin\";\n        if (!canAccess) {\n            throw new Error(\"Unauthorized access\");\n        }\n        await this.updateInTable(\"orders\", id, updates);\n    }\n    // Rating operations with security and performance optimization\n    async getRatingsByProduct(productId) {\n        // Use index for performance\n        await this.buildIndexes();\n        const ratingIds = this.ratingIndexes.get(productId) || [];\n        const allRatings = await this.getAllFromTable(\"ratings\");\n        return allRatings.filter((rating)=>ratingIds.includes(rating.id));\n    }\n    async createRating(rating, requestingUserId) {\n        // Validate required fields\n        if (!rating.product_id || !rating.user_id || !rating.rating || rating.rating < 1 || rating.rating > 5) {\n            throw new Error(\"Invalid rating data\");\n        }\n        // Security check - users can only create ratings as themselves\n        if (rating.user_id !== requestingUserId) {\n            throw new Error(\"Unauthorized: Cannot create rating for another user\");\n        }\n        // Check for duplicate ratings\n        const existingRatings = await this.getRatingsByProduct(rating.product_id);\n        const existingRating = existingRatings.find((r)=>r.user_id === requestingUserId);\n        if (existingRating) {\n            throw new Error(\"User has already rated this product\");\n        }\n        await this.addToTable(\"ratings\", rating);\n        // Update indexes\n        await this.buildIndexes();\n    }\n    // Plan operations\n    async getUserPlan(userId) {\n        const plans = await this.getAllFromTable(\"user_plans\");\n        return plans.find((plan)=>plan.userId === userId) || null;\n    }\n    async updateUserPlan(userId, planData) {\n        const plans = await this.getAllFromTable(\"user_plans\");\n        const existingIndex = plans.findIndex((plan)=>plan.userId === userId);\n        if (existingIndex !== -1) {\n            plans[existingIndex] = {\n                ...plans[existingIndex],\n                ...planData\n            };\n        } else {\n            plans.push({\n                userId,\n                ...planData\n            });\n        }\n        await this.safeSet(\"user_plans\", plans);\n    }\n    // Usage tracking\n    async getUserUsage(userId) {\n        const usage = await this.getAllFromTable(\"user_usage\");\n        return usage.find((u)=>u.userId === userId) || {\n            productsCreated: 0,\n            adsCreated: 0,\n            reportsGenerated: 0\n        };\n    }\n    async incrementUsage(userId, field) {\n        const usage = await this.getAllFromTable(\"user_usage\");\n        const existingIndex = usage.findIndex((u)=>u.userId === userId);\n        if (existingIndex !== -1) {\n            usage[existingIndex][field] = (usage[existingIndex][field] || 0) + 1;\n        } else {\n            usage.push({\n                userId,\n                [field]: 1\n            });\n        }\n        await this.safeSet(\"user_usage\", usage);\n    }\n    // Insights operations\n    async getInsights() {\n        return this.getAllFromTable(\"insights\");\n    }\n    // Storefront operations with security checks\n    async getStorefronts(requestingUserId, requestingUserRole) {\n        const storefronts = await this.getAllFromTable(\"storefronts\");\n        // If not admin, only return user's own storefront or active public ones\n        if (requestingUserRole !== \"admin\") {\n            return storefronts.filter((store)=>store.merchant_id === requestingUserId || store.status === \"active\");\n        }\n        return storefronts;\n    }\n    async getStorefrontBySlug(slug) {\n        const storefronts = await this.getStorefronts();\n        const storefront = storefronts.find((store)=>store.slug === slug) || null;\n        // Public storefronts are visible to all\n        if (storefront && storefront.status === \"active\") {\n            return storefront;\n        }\n        return null;\n    }\n    async getStorefrontByMerchant(merchantId, requestingUserId, requestingUserRole) {\n        // Security check for private access\n        if (requestingUserId && !await this.checkUserAccess(requestingUserId, merchantId, requestingUserRole)) {\n            // Return only if storefront is public\n            const storefronts = await this.getStorefronts();\n            const storefront = storefronts.find((store)=>store.merchant_id === merchantId) || null;\n            return storefront && storefront.status === \"active\" ? storefront : null;\n        }\n        const storefronts = await this.getStorefronts();\n        return storefronts.find((store)=>store.merchant_id === merchantId) || null;\n    }\n    async createStorefront(storefront, requestingUserId) {\n        // Validate required fields\n        if (!storefront.merchant_id || !storefront.store_name || !storefront.slug) {\n            throw new Error(\"Missing required storefront fields\");\n        }\n        // Security check\n        if (storefront.merchant_id !== requestingUserId) {\n            throw new Error(\"Unauthorized: Cannot create storefront for another user\");\n        }\n        // Check for duplicate slug\n        const existingStorefront = await this.getStorefrontBySlug(storefront.slug);\n        if (existingStorefront) {\n            throw new Error(\"Storefront slug already exists\");\n        }\n        await this.addToTable(\"storefronts\", storefront);\n    }\n    async updateStorefront(id, updates, requestingUserId, requestingUserRole) {\n        const storefronts = await this.getAllFromTable(\"storefronts\");\n        const storefront = storefronts.find((s)=>s.id === id);\n        if (!storefront) {\n            throw new Error(\"Storefront not found\");\n        }\n        // Security check\n        if (!await this.checkUserAccess(requestingUserId, storefront.merchant_id, requestingUserRole)) {\n            throw new Error(\"Unauthorized access\");\n        }\n        // If updating slug, check for duplicates\n        if (updates.slug && updates.slug !== storefront.slug) {\n            const existingStorefront = await this.getStorefrontBySlug(updates.slug);\n            if (existingStorefront) {\n                throw new Error(\"Storefront slug already exists\");\n            }\n        }\n        await this.updateInTable(\"storefronts\", id, updates);\n    }\n    async generateUniqueSlug(baseName) {\n        const baseSlug = baseName.toLowerCase().replace(/[^a-z0-9\\s-]/g, \"\").replace(/\\s+/g, \"-\").replace(/-+/g, \"-\").trim();\n        const storefronts = await this.getStorefronts();\n        let counter = 0;\n        let slug = baseSlug;\n        while(storefronts.find((store)=>store.slug === slug)){\n            counter++;\n            slug = `${baseSlug}-${counter}`;\n        }\n        return slug;\n    }\n    // Enhanced product operations with merchant filtering\n    async getProductsByMerchant(merchantId) {\n        const products = await this.getProducts();\n        return products.filter((product)=>product.seller_id === merchantId);\n    }\n    async getPublicProductsByMerchant(merchantId) {\n        const products = await this.getProductsByMerchant(merchantId);\n        return products.filter((product)=>product.status === \"active\");\n    }\n    // Enhanced order operations with merchant filtering\n    async getOrdersByMerchantId(merchantId) {\n        const orders = await this.getOrders();\n        return orders.filter((order)=>order.seller_id === merchantId);\n    }\n    // Enhanced advertisement operations with merchant filtering\n    async getAdsByMerchant(merchantId) {\n        const ads = await this.getAdvertisements();\n        return ads.filter((ad)=>ad.seller_id === merchantId);\n    }\n    constructor(){\n        // Performance optimization - In-memory indexes\n        this.productIndexes = new Map();\n        this.orderIndexes = new Map();\n        this.ratingIndexes = new Map();\n    }\n}\n// Initialize database operations and build indexes\nconst dbOps = new DatabaseOperations();\n// Initialize indexes on startup\nif (true) {\n    // Only run on server side\n    dbOps.buildIndexes().catch(console.error);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./lib/db.ts\n");

/***/ }),

/***/ "(rsc)/./scripts/init-database.ts":
/*!**********************************!*\
  !*** ./scripts/init-database.ts ***!
  \**********************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _lib_db__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../lib/db */ \"(rsc)/./lib/db.ts\");\n/* module decorator */ module = __webpack_require__.hmd(module);\n\nasync function initDatabase() {\n    console.log(\"Initializing database...\");\n    try {\n        // Create sample users\n        const adminUser = {\n            id: \"admin-1\",\n            email: \"admin@muvex.com\",\n            name: \"System Admin\",\n            role: \"admin\",\n            plan: \"premium\",\n            tenant_id: \"system\",\n            created_at: new Date().toISOString(),\n            status: \"active\"\n        };\n        const sellerUser = {\n            id: \"seller-1\",\n            email: \"seller@example.com\",\n            name: \"Premium Supplier\",\n            role: \"seller\",\n            plan: \"premium\",\n            tenant_id: \"tenant-1\",\n            created_at: new Date().toISOString(),\n            status: \"active\"\n        };\n        const buyerUser = {\n            id: \"buyer-1\",\n            email: \"buyer@example.com\",\n            name: \"Global Buyer\",\n            role: \"buyer\",\n            plan: \"standard\",\n            tenant_id: \"tenant-2\",\n            created_at: new Date().toISOString(),\n            status: \"active\"\n        };\n        await _lib_db__WEBPACK_IMPORTED_MODULE_0__.dbOps.createUser(adminUser);\n        await _lib_db__WEBPACK_IMPORTED_MODULE_0__.dbOps.createUser(sellerUser);\n        await _lib_db__WEBPACK_IMPORTED_MODULE_0__.dbOps.createUser(buyerUser);\n        // Create sample products\n        const products = [\n            {\n                id: \"product-1\",\n                name: \"Industrial Oil Pump\",\n                description: \"High-performance centrifugal oil pump suitable for marine and industrial applications\",\n                price: 4500,\n                category: \"Oil & Gas\",\n                seller_id: \"seller-1\",\n                tenant_id: \"tenant-1\",\n                status: \"approved\",\n                images: [\n                    \"/api/placeholder/400/300\"\n                ],\n                tags: [\n                    \"oil\",\n                    \"pump\",\n                    \"industrial\",\n                    \"marine\"\n                ],\n                created_at: new Date().toISOString(),\n                updated_at: new Date().toISOString()\n            },\n            {\n                id: \"product-2\",\n                name: \"Marine Injection Molding System\",\n                description: \"Complete injection molding system designed for marine environment manufacturing\",\n                price: 125000,\n                category: \"Manufacturing\",\n                seller_id: \"seller-1\",\n                tenant_id: \"tenant-1\",\n                status: \"approved\",\n                images: [\n                    \"/api/placeholder/400/300\"\n                ],\n                tags: [\n                    \"injection\",\n                    \"molding\",\n                    \"marine\",\n                    \"manufacturing\"\n                ],\n                created_at: new Date().toISOString(),\n                updated_at: new Date().toISOString()\n            },\n            {\n                id: \"product-3\",\n                name: \"Solar Panel Kit - Commercial Grade\",\n                description: \"High-efficiency solar panel system for commercial and industrial applications\",\n                price: 15000,\n                category: \"Energy\",\n                seller_id: \"seller-1\",\n                tenant_id: \"tenant-1\",\n                status: \"approved\",\n                images: [\n                    \"/api/placeholder/400/300\"\n                ],\n                tags: [\n                    \"solar\",\n                    \"energy\",\n                    \"commercial\",\n                    \"renewable\"\n                ],\n                created_at: new Date().toISOString(),\n                updated_at: new Date().toISOString()\n            }\n        ];\n        for (const product of products){\n            await _lib_db__WEBPACK_IMPORTED_MODULE_0__.dbOps.createProduct(product);\n        }\n        // Create sample advertisements\n        const advertisements = [\n            {\n                id: \"ad-1\",\n                title: \"Premium Oil & Gas Equipment\",\n                description: \"Discover our range of certified oil and gas equipment for industrial operations\",\n                imageUrl: \"/api/placeholder/800/400\",\n                productId: \"product-1\",\n                sellerId: \"seller-1\",\n                status: \"active\",\n                created_at: new Date().toISOString(),\n                tenant_id: \"tenant-1\"\n            },\n            {\n                id: \"ad-2\",\n                title: \"Advanced Manufacturing Solutions\",\n                description: \"Transform your manufacturing with our state-of-the-art injection molding systems\",\n                imageUrl: \"/api/placeholder/800/400\",\n                productId: \"product-2\",\n                sellerId: \"seller-1\",\n                status: \"active\",\n                created_at: new Date().toISOString(),\n                tenant_id: \"tenant-1\"\n            }\n        ];\n        for (const ad of advertisements){\n            await _lib_db__WEBPACK_IMPORTED_MODULE_0__.dbOps.createAdvertisement(ad);\n        }\n        // Create sample insights\n        const insights = [\n            {\n                id: \"insight-1\",\n                title: \"Global Oil & Gas Market Trends 2024\",\n                content: \"The oil and gas industry is experiencing significant transformation with new technologies and sustainability initiatives reshaping the market landscape.\",\n                author_id: \"admin-1\",\n                category: \"Market Analysis\",\n                featured: true,\n                published_at: new Date().toISOString(),\n                tenant_id: \"system\"\n            },\n            {\n                id: \"insight-2\",\n                title: \"Manufacturing Efficiency in Marine Industries\",\n                content: \"Marine manufacturing sector is adopting new technologies to improve efficiency and reduce environmental impact.\",\n                author_id: \"admin-1\",\n                category: \"Industry News\",\n                featured: false,\n                published_at: new Date().toISOString(),\n                tenant_id: \"system\"\n            }\n        ];\n        for (const insight of insights){\n            await _lib_db__WEBPACK_IMPORTED_MODULE_0__.dbOps.createInsight(insight);\n        }\n        console.log(\"✅ Database initialized successfully!\");\n        console.log(`Created ${products.length} products`);\n        console.log(`Created ${advertisements.length} advertisements`);\n        console.log(`Created ${insights.length} insights`);\n    } catch (error) {\n        console.error(\"❌ Error initializing database:\", error);\n        throw error;\n    }\n}\n// Run if called directly\nif (__webpack_require__.c[__webpack_require__.s] === module) {\n    initDatabase().catch(console.error);\n}\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (initDatabase);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QUFLQSxDQUFDa0MsbUJBQW1CLENBQUNEO1FBQ2xDO1FBRUEseUJBQXlCO1FBQ3pCLE1BQU1FLFdBQVc7WUFDZjtnQkFDRTlCLElBQUk7Z0JBQ0p3QixPQUFPO2dCQUNQTyxTQUFTO2dCQUNUQyxXQUFXO2dCQUNYaEIsVUFBVTtnQkFDVmlCLFVBQVU7Z0JBQ1ZDLGNBQWMsSUFBSTNCLE9BQU9DLFdBQVc7Z0JBQ3BDSCxXQUFXO1lBQ2I7WUFDQTtnQkFDRUwsSUFBSTtnQkFDSndCLE9BQU87Z0JBQ1BPLFNBQVM7Z0JBQ1RDLFdBQVc7Z0JBQ1hoQixVQUFVO2dCQUNWaUIsVUFBVTtnQkFDVkMsY0FBYyxJQUFJM0IsT0FBT0MsV0FBVztnQkFDcENILFdBQVc7WUFDYjtTQUNEO1FBRUQsS0FBSyxNQUFNOEIsV0FBV0wsU0FBVTtZQUM5QixNQUFNbkMsMENBQUtBLENBQUN5QyxhQUFhLENBQUNEO1FBQzVCO1FBRUF0QyxRQUFRQyxHQUFHLENBQUM7UUFDWkQsUUFBUUMsR0FBRyxDQUFDLENBQUMsUUFBUSxFQUFFZSxTQUFTd0IsTUFBTSxDQUFDLFNBQVMsQ0FBQztRQUNqRHhDLFFBQVFDLEdBQUcsQ0FBQyxDQUFDLFFBQVEsRUFBRXlCLGVBQWVjLE1BQU0sQ0FBQyxlQUFlLENBQUM7UUFDN0R4QyxRQUFRQyxHQUFHLENBQUMsQ0FBQyxRQUFRLEVBQUVnQyxTQUFTTyxNQUFNLENBQUMsU0FBUyxDQUFDO0lBRW5ELEVBQUUsT0FBT0MsT0FBTztRQUNkekMsUUFBUXlDLEtBQUssQ0FBQyxrQ0FBa0NBO1FBQ2hELE1BQU1BO0lBQ1I7QUFDRjtBQUVBLHlCQUF5QjtBQUN6QixJQUFJQyw0Q0FBWSxLQUFLRSxRQUFRO0lBQzNCN0MsZUFBZThDLEtBQUssQ0FBQzdDLFFBQVF5QyxLQUFLO0FBQ3BDO0FBRUEsaUVBQWUxQyxZQUFZQSxFQUFBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vb2d4LXNhYXMtbXZwLy4vc2NyaXB0cy9pbml0LWRhdGFiYXNlLnRzPzVmZjYiXSwic291cmNlc0NvbnRlbnQiOlsiXG5pbXBvcnQgeyBkYk9wcyB9IGZyb20gJy4uL2xpYi9kYidcblxuYXN5bmMgZnVuY3Rpb24gaW5pdERhdGFiYXNlKCkge1xuICBjb25zb2xlLmxvZygnSW5pdGlhbGl6aW5nIGRhdGFiYXNlLi4uJylcbiAgXG4gIHRyeSB7XG4gICAgLy8gQ3JlYXRlIHNhbXBsZSB1c2Vyc1xuICAgIGNvbnN0IGFkbWluVXNlciA9IHtcbiAgICAgIGlkOiAnYWRtaW4tMScsXG4gICAgICBlbWFpbDogJ2FkbWluQG11dmV4LmNvbScsXG4gICAgICBuYW1lOiAnU3lzdGVtIEFkbWluJyxcbiAgICAgIHJvbGU6ICdhZG1pbicgYXMgY29uc3QsXG4gICAgICBwbGFuOiAncHJlbWl1bScgYXMgY29uc3QsXG4gICAgICB0ZW5hbnRfaWQ6ICdzeXN0ZW0nLFxuICAgICAgY3JlYXRlZF9hdDogbmV3IERhdGUoKS50b0lTT1N0cmluZygpLFxuICAgICAgc3RhdHVzOiAnYWN0aXZlJyBhcyBjb25zdFxuICAgIH1cbiAgICBcbiAgICBjb25zdCBzZWxsZXJVc2VyID0ge1xuICAgICAgaWQ6ICdzZWxsZXItMScsIFxuICAgICAgZW1haWw6ICdzZWxsZXJAZXhhbXBsZS5jb20nLFxuICAgICAgbmFtZTogJ1ByZW1pdW0gU3VwcGxpZXInLFxuICAgICAgcm9sZTogJ3NlbGxlcicgYXMgY29uc3QsXG4gICAgICBwbGFuOiAncHJlbWl1bScgYXMgY29uc3QsXG4gICAgICB0ZW5hbnRfaWQ6ICd0ZW5hbnQtMScsXG4gICAgICBjcmVhdGVkX2F0OiBuZXcgRGF0ZSgpLnRvSVNPU3RyaW5nKCksXG4gICAgICBzdGF0dXM6ICdhY3RpdmUnIGFzIGNvbnN0XG4gICAgfVxuICAgIFxuICAgIGNvbnN0IGJ1eWVyVXNlciA9IHtcbiAgICAgIGlkOiAnYnV5ZXItMScsXG4gICAgICBlbWFpbDogJ2J1eWVyQGV4YW1wbGUuY29tJywgXG4gICAgICBuYW1lOiAnR2xvYmFsIEJ1eWVyJyxcbiAgICAgIHJvbGU6ICdidXllcicgYXMgY29uc3QsXG4gICAgICBwbGFuOiAnc3RhbmRhcmQnIGFzIGNvbnN0LFxuICAgICAgdGVuYW50X2lkOiAndGVuYW50LTInLFxuICAgICAgY3JlYXRlZF9hdDogbmV3IERhdGUoKS50b0lTT1N0cmluZygpLFxuICAgICAgc3RhdHVzOiAnYWN0aXZlJyBhcyBjb25zdFxuICAgIH1cblxuICAgIGF3YWl0IGRiT3BzLmNyZWF0ZVVzZXIoYWRtaW5Vc2VyKVxuICAgIGF3YWl0IGRiT3BzLmNyZWF0ZVVzZXIoc2VsbGVyVXNlcilcbiAgICBhd2FpdCBkYk9wcy5jcmVhdGVVc2VyKGJ1eWVyVXNlcilcblxuICAgIC8vIENyZWF0ZSBzYW1wbGUgcHJvZHVjdHNcbiAgICBjb25zdCBwcm9kdWN0cyA9IFtcbiAgICAgIHtcbiAgICAgICAgaWQ6ICdwcm9kdWN0LTEnLFxuICAgICAgICBuYW1lOiAnSW5kdXN0cmlhbCBPaWwgUHVtcCcsXG4gICAgICAgIGRlc2NyaXB0aW9uOiAnSGlnaC1wZXJmb3JtYW5jZSBjZW50cmlmdWdhbCBvaWwgcHVtcCBzdWl0YWJsZSBmb3IgbWFyaW5lIGFuZCBpbmR1c3RyaWFsIGFwcGxpY2F0aW9ucycsXG4gICAgICAgIHByaWNlOiA0NTAwLFxuICAgICAgICBjYXRlZ29yeTogJ09pbCAmIEdhcycsXG4gICAgICAgIHNlbGxlcl9pZDogJ3NlbGxlci0xJyxcbiAgICAgICAgdGVuYW50X2lkOiAndGVuYW50LTEnLFxuICAgICAgICBzdGF0dXM6ICdhcHByb3ZlZCcgYXMgY29uc3QsXG4gICAgICAgIGltYWdlczogWycvYXBpL3BsYWNlaG9sZGVyLzQwMC8zMDAnXSxcbiAgICAgICAgdGFnczogWydvaWwnLCAncHVtcCcsICdpbmR1c3RyaWFsJywgJ21hcmluZSddLFxuICAgICAgICBjcmVhdGVkX2F0OiBuZXcgRGF0ZSgpLnRvSVNPU3RyaW5nKCksXG4gICAgICAgIHVwZGF0ZWRfYXQ6IG5ldyBEYXRlKCkudG9JU09TdHJpbmcoKVxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgaWQ6ICdwcm9kdWN0LTInLFxuICAgICAgICBuYW1lOiAnTWFyaW5lIEluamVjdGlvbiBNb2xkaW5nIFN5c3RlbScsXG4gICAgICAgIGRlc2NyaXB0aW9uOiAnQ29tcGxldGUgaW5qZWN0aW9uIG1vbGRpbmcgc3lzdGVtIGRlc2lnbmVkIGZvciBtYXJpbmUgZW52aXJvbm1lbnQgbWFudWZhY3R1cmluZycsXG4gICAgICAgIHByaWNlOiAxMjUwMDAsXG4gICAgICAgIGNhdGVnb3J5OiAnTWFudWZhY3R1cmluZycsXG4gICAgICAgIHNlbGxlcl9pZDogJ3NlbGxlci0xJyxcbiAgICAgICAgdGVuYW50X2lkOiAndGVuYW50LTEnLFxuICAgICAgICBzdGF0dXM6ICdhcHByb3ZlZCcgYXMgY29uc3QsXG4gICAgICAgIGltYWdlczogWycvYXBpL3BsYWNlaG9sZGVyLzQwMC8zMDAnXSxcbiAgICAgICAgdGFnczogWydpbmplY3Rpb24nLCAnbW9sZGluZycsICdtYXJpbmUnLCAnbWFudWZhY3R1cmluZyddLFxuICAgICAgICBjcmVhdGVkX2F0OiBuZXcgRGF0ZSgpLnRvSVNPU3RyaW5nKCksXG4gICAgICAgIHVwZGF0ZWRfYXQ6IG5ldyBEYXRlKCkudG9JU09TdHJpbmcoKVxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgaWQ6ICdwcm9kdWN0LTMnLFxuICAgICAgICBuYW1lOiAnU29sYXIgUGFuZWwgS2l0IC0gQ29tbWVyY2lhbCBHcmFkZScsXG4gICAgICAgIGRlc2NyaXB0aW9uOiAnSGlnaC1lZmZpY2llbmN5IHNvbGFyIHBhbmVsIHN5c3RlbSBmb3IgY29tbWVyY2lhbCBhbmQgaW5kdXN0cmlhbCBhcHBsaWNhdGlvbnMnLFxuICAgICAgICBwcmljZTogMTUwMDAsXG4gICAgICAgIGNhdGVnb3J5OiAnRW5lcmd5JyxcbiAgICAgICAgc2VsbGVyX2lkOiAnc2VsbGVyLTEnLFxuICAgICAgICB0ZW5hbnRfaWQ6ICd0ZW5hbnQtMScsXG4gICAgICAgIHN0YXR1czogJ2FwcHJvdmVkJyBhcyBjb25zdCxcbiAgICAgICAgaW1hZ2VzOiBbJy9hcGkvcGxhY2Vob2xkZXIvNDAwLzMwMCddLFxuICAgICAgICB0YWdzOiBbJ3NvbGFyJywgJ2VuZXJneScsICdjb21tZXJjaWFsJywgJ3JlbmV3YWJsZSddLFxuICAgICAgICBjcmVhdGVkX2F0OiBuZXcgRGF0ZSgpLnRvSVNPU3RyaW5nKCksXG4gICAgICAgIHVwZGF0ZWRfYXQ6IG5ldyBEYXRlKCkudG9JU09TdHJpbmcoKVxuICAgICAgfVxuICAgIF1cblxuICAgIGZvciAoY29uc3QgcHJvZHVjdCBvZiBwcm9kdWN0cykge1xuICAgICAgYXdhaXQgZGJPcHMuY3JlYXRlUHJvZHVjdChwcm9kdWN0KVxuICAgIH1cblxuICAgIC8vIENyZWF0ZSBzYW1wbGUgYWR2ZXJ0aXNlbWVudHNcbiAgICBjb25zdCBhZHZlcnRpc2VtZW50cyA9IFtcbiAgICAgIHtcbiAgICAgICAgaWQ6ICdhZC0xJyxcbiAgICAgICAgdGl0bGU6ICdQcmVtaXVtIE9pbCAmIEdhcyBFcXVpcG1lbnQnLFxuICAgICAgICBkZXNjcmlwdGlvbjogJ0Rpc2NvdmVyIG91ciByYW5nZSBvZiBjZXJ0aWZpZWQgb2lsIGFuZCBnYXMgZXF1aXBtZW50IGZvciBpbmR1c3RyaWFsIG9wZXJhdGlvbnMnLFxuICAgICAgICBpbWFnZVVybDogJy9hcGkvcGxhY2Vob2xkZXIvODAwLzQwMCcsXG4gICAgICAgIHByb2R1Y3RJZDogJ3Byb2R1Y3QtMScsXG4gICAgICAgIHNlbGxlcklkOiAnc2VsbGVyLTEnLFxuICAgICAgICBzdGF0dXM6ICdhY3RpdmUnIGFzIGNvbnN0LFxuICAgICAgICBjcmVhdGVkX2F0OiBuZXcgRGF0ZSgpLnRvSVNPU3RyaW5nKCksXG4gICAgICAgIHRlbmFudF9pZDogJ3RlbmFudC0xJ1xuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgaWQ6ICdhZC0yJyxcbiAgICAgICAgdGl0bGU6ICdBZHZhbmNlZCBNYW51ZmFjdHVyaW5nIFNvbHV0aW9ucycsXG4gICAgICAgIGRlc2NyaXB0aW9uOiAnVHJhbnNmb3JtIHlvdXIgbWFudWZhY3R1cmluZyB3aXRoIG91ciBzdGF0ZS1vZi10aGUtYXJ0IGluamVjdGlvbiBtb2xkaW5nIHN5c3RlbXMnLFxuICAgICAgICBpbWFnZVVybDogJy9hcGkvcGxhY2Vob2xkZXIvODAwLzQwMCcsXG4gICAgICAgIHByb2R1Y3RJZDogJ3Byb2R1Y3QtMicsXG4gICAgICAgIHNlbGxlcklkOiAnc2VsbGVyLTEnLFxuICAgICAgICBzdGF0dXM6ICdhY3RpdmUnIGFzIGNvbnN0LFxuICAgICAgICBjcmVhdGVkX2F0OiBuZXcgRGF0ZSgpLnRvSVNPU3RyaW5nKCksXG4gICAgICAgIHRlbmFudF9pZDogJ3RlbmFudC0xJ1xuICAgICAgfVxuICAgIF1cblxuICAgIGZvciAoY29uc3QgYWQgb2YgYWR2ZXJ0aXNlbWVudHMpIHtcbiAgICAgIGF3YWl0IGRiT3BzLmNyZWF0ZUFkdmVydGlzZW1lbnQoYWQpXG4gICAgfVxuXG4gICAgLy8gQ3JlYXRlIHNhbXBsZSBpbnNpZ2h0c1xuICAgIGNvbnN0IGluc2lnaHRzID0gW1xuICAgICAge1xuICAgICAgICBpZDogJ2luc2lnaHQtMScsXG4gICAgICAgIHRpdGxlOiAnR2xvYmFsIE9pbCAmIEdhcyBNYXJrZXQgVHJlbmRzIDIwMjQnLFxuICAgICAgICBjb250ZW50OiAnVGhlIG9pbCBhbmQgZ2FzIGluZHVzdHJ5IGlzIGV4cGVyaWVuY2luZyBzaWduaWZpY2FudCB0cmFuc2Zvcm1hdGlvbiB3aXRoIG5ldyB0ZWNobm9sb2dpZXMgYW5kIHN1c3RhaW5hYmlsaXR5IGluaXRpYXRpdmVzIHJlc2hhcGluZyB0aGUgbWFya2V0IGxhbmRzY2FwZS4nLFxuICAgICAgICBhdXRob3JfaWQ6ICdhZG1pbi0xJyxcbiAgICAgICAgY2F0ZWdvcnk6ICdNYXJrZXQgQW5hbHlzaXMnLFxuICAgICAgICBmZWF0dXJlZDogdHJ1ZSxcbiAgICAgICAgcHVibGlzaGVkX2F0OiBuZXcgRGF0ZSgpLnRvSVNPU3RyaW5nKCksXG4gICAgICAgIHRlbmFudF9pZDogJ3N5c3RlbSdcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGlkOiAnaW5zaWdodC0yJyxcbiAgICAgICAgdGl0bGU6ICdNYW51ZmFjdHVyaW5nIEVmZmljaWVuY3kgaW4gTWFyaW5lIEluZHVzdHJpZXMnLFxuICAgICAgICBjb250ZW50OiAnTWFyaW5lIG1hbnVmYWN0dXJpbmcgc2VjdG9yIGlzIGFkb3B0aW5nIG5ldyB0ZWNobm9sb2dpZXMgdG8gaW1wcm92ZSBlZmZpY2llbmN5IGFuZCByZWR1Y2UgZW52aXJvbm1lbnRhbCBpbXBhY3QuJyxcbiAgICAgICAgYXV0aG9yX2lkOiAnYWRtaW4tMScsXG4gICAgICAgIGNhdGVnb3J5OiAnSW5kdXN0cnkgTmV3cycsXG4gICAgICAgIGZlYXR1cmVkOiBmYWxzZSxcbiAgICAgICAgcHVibGlzaGVkX2F0OiBuZXcgRGF0ZSgpLnRvSVNPU3RyaW5nKCksXG4gICAgICAgIHRlbmFudF9pZDogJ3N5c3RlbSdcbiAgICAgIH1cbiAgICBdXG5cbiAgICBmb3IgKGNvbnN0IGluc2lnaHQgb2YgaW5zaWdodHMpIHtcbiAgICAgIGF3YWl0IGRiT3BzLmNyZWF0ZUluc2lnaHQoaW5zaWdodClcbiAgICB9XG5cbiAgICBjb25zb2xlLmxvZygn4pyFIERhdGFiYXNlIGluaXRpYWxpemVkIHN1Y2Nlc3NmdWxseSEnKVxuICAgIGNvbnNvbGUubG9nKGBDcmVhdGVkICR7cHJvZHVjdHMubGVuZ3RofSBwcm9kdWN0c2ApXG4gICAgY29uc29sZS5sb2coYENyZWF0ZWQgJHthZHZlcnRpc2VtZW50cy5sZW5ndGh9IGFkdmVydGlzZW1lbnRzYClcbiAgICBjb25zb2xlLmxvZyhgQ3JlYXRlZCAke2luc2lnaHRzLmxlbmd0aH0gaW5zaWdodHNgKVxuICAgIFxuICB9IGNhdGNoIChlcnJvcikge1xuICAgIGNvbnNvbGUuZXJyb3IoJ+KdjCBFcnJvciBpbml0aWFsaXppbmcgZGF0YWJhc2U6JywgZXJyb3IpXG4gICAgdGhyb3cgZXJyb3JcbiAgfVxufVxuXG4vLyBSdW4gaWYgY2FsbGVkIGRpcmVjdGx5XG5pZiAocmVxdWlyZS5tYWluID09PSBtb2R1bGUpIHtcbiAgaW5pdERhdGFiYXNlKCkuY2F0Y2goY29uc29sZS5lcnJvcilcbn1cblxuZXhwb3J0IGRlZmF1bHQgaW5pdERhdGFiYXNlXG4iXSwibmFtZXMiOlsiZGJPcHMiLCJpbml0RGF0YWJhc2UiLCJjb25zb2xlIiwibG9nIiwiYWRtaW5Vc2VyIiwiaWQiLCJlbWFpbCIsIm5hbWUiLCJyb2xlIiwicGxhbiIsInRlbmFudF9pZCIsImNyZWF0ZWRfYXQiLCJEYXRlIiwidG9JU09TdHJpbmciLCJzdGF0dXMiLCJzZWxsZXJVc2VyIiwiYnV5ZXJVc2VyIiwiY3JlYXRlVXNlciIsInByb2R1Y3RzIiwiZGVzY3JpcHRpb24iLCJwcmljZSIsImNhdGVnb3J5Iiwic2VsbGVyX2lkIiwiaW1hZ2VzIiwidGFncyIsInVwZGF0ZWRfYXQiLCJwcm9kdWN0IiwiY3JlYXRlUHJvZHVjdCIsImFkdmVydGlzZW1lbnRzIiwidGl0bGUiLCJpbWFnZVVybCIsInByb2R1Y3RJZCIsInNlbGxlcklkIiwiYWQiLCJjcmVhdGVBZHZlcnRpc2VtZW50IiwiaW5zaWdodHMiLCJjb250ZW50IiwiYXV0aG9yX2lkIiwiZmVhdHVyZWQiLCJwdWJsaXNoZWRfYXQiLCJpbnNpZ2h0IiwiY3JlYXRlSW5zaWdodCIsImxlbmd0aCIsImVycm9yIiwicmVxdWlyZSIsIm1haW4iLCJtb2R1bGUiLCJjYXRjaCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./scripts/init-database.ts\n");

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../../../webpack-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = __webpack_require__.X(0, ["vendor-chunks/next","vendor-chunks/whatwg-url","vendor-chunks/tr46","vendor-chunks/node-fetch","vendor-chunks/webidl-conversions","vendor-chunks/@replit"], () => (__webpack_exec__("(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fseed-database%2Froute&page=%2Fapi%2Fseed-database%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fseed-database%2Froute.ts&appDir=%2Fhome%2Frunner%2Fworkspace%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2Fhome%2Frunner%2Fworkspace&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!")));
module.exports = __webpack_exports__;

})();