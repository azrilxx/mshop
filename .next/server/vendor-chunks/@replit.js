/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@replit";
exports.ids = ["vendor-chunks/@replit"];
exports.modules = {

/***/ "(rsc)/./node_modules/@replit/database/index.js":
/*!************************************************!*\
  !*** ./node_modules/@replit/database/index.js ***!
  \************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("const fetch = __webpack_require__(/*! node-fetch */ \"(rsc)/./node_modules/node-fetch/lib/index.mjs\");\nconst fs = __webpack_require__(/*! fs */ \"fs\");\n\nconst replitDBFilename = \"/tmp/replitdb\"\n\nclass Client {\n  /**\n   * Initiates Class.\n   * @param {String} key Custom database URL\n   */\n  constructor(key) {\n    if (key) {\n      this.key = key;\n    } else {\n      this.key = getKey();\n      setInterval(() => {\n        this.key = getKey();\n      }, 1000 * 60 * 60);\n    }\n  }\n\n  // Native Functions\n  /**\n   * Gets a key\n   * @param {String} key Key\n   * @param {boolean} [options.raw=false] Makes it so that we return the raw string value. Default is false.\n   */\n  async get(key, options) {\n    return await fetch(this.key + \"/\" + key)\n      .then((e) => e.text())\n      .then((strValue) => {\n        if (options && options.raw) {\n          return strValue;\n        }\n\n        if (!strValue) {\n          return null;\n        }\n\n        let value = strValue;\n        try {\n          // Try to parse as JSON, if it fails, we throw\n          value = JSON.parse(strValue);\n        } catch (_err) {\n          throw new SyntaxError(\n            `Failed to parse value of ${key}, try passing a raw option to get the raw value`\n          );\n        }\n\n        if (value === null || value === undefined) {\n          return null;\n        }\n\n        return value;\n      });\n  }\n\n  /**\n   * Sets a key\n   * @param {String} key Key\n   * @param {any} value Value\n   */\n  async set(key, value) {\n    const strValue = JSON.stringify(value);\n\n    await fetch(this.key, {\n      method: \"POST\",\n      headers: { \"Content-Type\": \"application/x-www-form-urlencoded\" },\n      body: encodeURIComponent(key) + \"=\" + encodeURIComponent(strValue),\n    });\n    return this;\n  }\n\n  /**\n   * Deletes a key\n   * @param {String} key Key\n   */\n  async delete(key) {\n    await fetch(this.key + \"/\" + key, { method: \"DELETE\" });\n    return this;\n  }\n\n  /**\n   * List key starting with a prefix or list all.\n   * @param {String} prefix Filter keys starting with prefix.\n   */\n  async list(prefix = \"\") {\n    return await fetch(\n      this.key + `?encode=true&prefix=${encodeURIComponent(prefix)}`\n    )\n      .then((r) => r.text())\n      .then((t) => {\n        if (t.length === 0) {\n          return [];\n        }\n        return t.split(\"\\n\").map(decodeURIComponent);\n      });\n  }\n\n  // Dynamic Functions\n  /**\n   * Clears the database.\n   */\n  async empty() {\n    const promises = [];\n    for (const key of await this.list()) {\n      promises.push(this.delete(key));\n    }\n\n    await Promise.all(promises);\n\n    return this;\n  }\n\n  /**\n   * Get all key/value pairs and return as an object\n   */\n  async getAll() {\n    let output = {};\n    for (const key of await this.list()) {\n      let value = await this.get(key);\n      output[key] = value;\n    }\n    return output;\n  }\n\n  /**\n   * Sets the entire database through an object.\n   * @param {Object} obj The object.\n   */\n  async setAll(obj) {\n    for (const key in obj) {\n      let val = obj[key];\n      await this.set(key, val);\n    }\n    return this;\n  }\n\n  /**\n   * Delete multiple entries by keys\n   * @param {Array<string>} args Keys\n   */\n  async deleteMultiple(...args) {\n    const promises = [];\n\n    for (const arg of args) {\n      promises.push(this.delete(arg));\n    }\n\n    await Promise.all(promises);\n\n    return this;\n  }\n}\n\nmodule.exports = Client;\n\nfunction getKey() {\n  try {\n    return fs.readFileSync(replitDBFilename, \"utf8\");\n  } catch (err) {\n    return process.env.REPLIT_DB_URL;\n  }\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQHJlcGxpdC9kYXRhYmFzZS9pbmRleC5qcyIsIm1hcHBpbmdzIjoiQUFBQSxjQUFjLG1CQUFPLENBQUMsaUVBQVk7QUFDbEMsV0FBVyxtQkFBTyxDQUFDLGNBQUk7O0FBRXZCOztBQUVBO0FBQ0E7QUFDQTtBQUNBLGFBQWEsUUFBUTtBQUNyQjtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxhQUFhLFFBQVE7QUFDckIsYUFBYSxTQUFTO0FBQ3RCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsVUFBVTtBQUNWO0FBQ0Esd0NBQXdDLElBQUk7QUFDNUM7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxPQUFPO0FBQ1A7O0FBRUE7QUFDQTtBQUNBLGFBQWEsUUFBUTtBQUNyQixhQUFhLEtBQUs7QUFDbEI7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxpQkFBaUIscURBQXFEO0FBQ3RFO0FBQ0EsS0FBSztBQUNMO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLGFBQWEsUUFBUTtBQUNyQjtBQUNBO0FBQ0Esd0NBQXdDLGtCQUFrQjtBQUMxRDtBQUNBOztBQUVBO0FBQ0E7QUFDQSxhQUFhLFFBQVE7QUFDckI7QUFDQTtBQUNBO0FBQ0Esd0NBQXdDLDJCQUEyQjtBQUNuRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxhQUFhLFFBQVE7QUFDckI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsYUFBYSxlQUFlO0FBQzVCO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9vZ3gtc2Fhcy1tdnAvLi9ub2RlX21vZHVsZXMvQHJlcGxpdC9kYXRhYmFzZS9pbmRleC5qcz8yZTliIl0sInNvdXJjZXNDb250ZW50IjpbImNvbnN0IGZldGNoID0gcmVxdWlyZShcIm5vZGUtZmV0Y2hcIik7XG5jb25zdCBmcyA9IHJlcXVpcmUoXCJmc1wiKTtcblxuY29uc3QgcmVwbGl0REJGaWxlbmFtZSA9IFwiL3RtcC9yZXBsaXRkYlwiXG5cbmNsYXNzIENsaWVudCB7XG4gIC8qKlxuICAgKiBJbml0aWF0ZXMgQ2xhc3MuXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBrZXkgQ3VzdG9tIGRhdGFiYXNlIFVSTFxuICAgKi9cbiAgY29uc3RydWN0b3Ioa2V5KSB7XG4gICAgaWYgKGtleSkge1xuICAgICAgdGhpcy5rZXkgPSBrZXk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMua2V5ID0gZ2V0S2V5KCk7XG4gICAgICBzZXRJbnRlcnZhbCgoKSA9PiB7XG4gICAgICAgIHRoaXMua2V5ID0gZ2V0S2V5KCk7XG4gICAgICB9LCAxMDAwICogNjAgKiA2MCk7XG4gICAgfVxuICB9XG5cbiAgLy8gTmF0aXZlIEZ1bmN0aW9uc1xuICAvKipcbiAgICogR2V0cyBhIGtleVxuICAgKiBAcGFyYW0ge1N0cmluZ30ga2V5IEtleVxuICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtvcHRpb25zLnJhdz1mYWxzZV0gTWFrZXMgaXQgc28gdGhhdCB3ZSByZXR1cm4gdGhlIHJhdyBzdHJpbmcgdmFsdWUuIERlZmF1bHQgaXMgZmFsc2UuXG4gICAqL1xuICBhc3luYyBnZXQoa2V5LCBvcHRpb25zKSB7XG4gICAgcmV0dXJuIGF3YWl0IGZldGNoKHRoaXMua2V5ICsgXCIvXCIgKyBrZXkpXG4gICAgICAudGhlbigoZSkgPT4gZS50ZXh0KCkpXG4gICAgICAudGhlbigoc3RyVmFsdWUpID0+IHtcbiAgICAgICAgaWYgKG9wdGlvbnMgJiYgb3B0aW9ucy5yYXcpIHtcbiAgICAgICAgICByZXR1cm4gc3RyVmFsdWU7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIXN0clZhbHVlKSB7XG4gICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cblxuICAgICAgICBsZXQgdmFsdWUgPSBzdHJWYWx1ZTtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAvLyBUcnkgdG8gcGFyc2UgYXMgSlNPTiwgaWYgaXQgZmFpbHMsIHdlIHRocm93XG4gICAgICAgICAgdmFsdWUgPSBKU09OLnBhcnNlKHN0clZhbHVlKTtcbiAgICAgICAgfSBjYXRjaCAoX2Vycikge1xuICAgICAgICAgIHRocm93IG5ldyBTeW50YXhFcnJvcihcbiAgICAgICAgICAgIGBGYWlsZWQgdG8gcGFyc2UgdmFsdWUgb2YgJHtrZXl9LCB0cnkgcGFzc2luZyBhIHJhdyBvcHRpb24gdG8gZ2V0IHRoZSByYXcgdmFsdWVgXG4gICAgICAgICAgKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh2YWx1ZSA9PT0gbnVsbCB8fCB2YWx1ZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBTZXRzIGEga2V5XG4gICAqIEBwYXJhbSB7U3RyaW5nfSBrZXkgS2V5XG4gICAqIEBwYXJhbSB7YW55fSB2YWx1ZSBWYWx1ZVxuICAgKi9cbiAgYXN5bmMgc2V0KGtleSwgdmFsdWUpIHtcbiAgICBjb25zdCBzdHJWYWx1ZSA9IEpTT04uc3RyaW5naWZ5KHZhbHVlKTtcblxuICAgIGF3YWl0IGZldGNoKHRoaXMua2V5LCB7XG4gICAgICBtZXRob2Q6IFwiUE9TVFwiLFxuICAgICAgaGVhZGVyczogeyBcIkNvbnRlbnQtVHlwZVwiOiBcImFwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZFwiIH0sXG4gICAgICBib2R5OiBlbmNvZGVVUklDb21wb25lbnQoa2V5KSArIFwiPVwiICsgZW5jb2RlVVJJQ29tcG9uZW50KHN0clZhbHVlKSxcbiAgICB9KTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIC8qKlxuICAgKiBEZWxldGVzIGEga2V5XG4gICAqIEBwYXJhbSB7U3RyaW5nfSBrZXkgS2V5XG4gICAqL1xuICBhc3luYyBkZWxldGUoa2V5KSB7XG4gICAgYXdhaXQgZmV0Y2godGhpcy5rZXkgKyBcIi9cIiArIGtleSwgeyBtZXRob2Q6IFwiREVMRVRFXCIgfSk7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICAvKipcbiAgICogTGlzdCBrZXkgc3RhcnRpbmcgd2l0aCBhIHByZWZpeCBvciBsaXN0IGFsbC5cbiAgICogQHBhcmFtIHtTdHJpbmd9IHByZWZpeCBGaWx0ZXIga2V5cyBzdGFydGluZyB3aXRoIHByZWZpeC5cbiAgICovXG4gIGFzeW5jIGxpc3QocHJlZml4ID0gXCJcIikge1xuICAgIHJldHVybiBhd2FpdCBmZXRjaChcbiAgICAgIHRoaXMua2V5ICsgYD9lbmNvZGU9dHJ1ZSZwcmVmaXg9JHtlbmNvZGVVUklDb21wb25lbnQocHJlZml4KX1gXG4gICAgKVxuICAgICAgLnRoZW4oKHIpID0+IHIudGV4dCgpKVxuICAgICAgLnRoZW4oKHQpID0+IHtcbiAgICAgICAgaWYgKHQubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgcmV0dXJuIFtdO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0LnNwbGl0KFwiXFxuXCIpLm1hcChkZWNvZGVVUklDb21wb25lbnQpO1xuICAgICAgfSk7XG4gIH1cblxuICAvLyBEeW5hbWljIEZ1bmN0aW9uc1xuICAvKipcbiAgICogQ2xlYXJzIHRoZSBkYXRhYmFzZS5cbiAgICovXG4gIGFzeW5jIGVtcHR5KCkge1xuICAgIGNvbnN0IHByb21pc2VzID0gW107XG4gICAgZm9yIChjb25zdCBrZXkgb2YgYXdhaXQgdGhpcy5saXN0KCkpIHtcbiAgICAgIHByb21pc2VzLnB1c2godGhpcy5kZWxldGUoa2V5KSk7XG4gICAgfVxuXG4gICAgYXdhaXQgUHJvbWlzZS5hbGwocHJvbWlzZXMpO1xuXG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICAvKipcbiAgICogR2V0IGFsbCBrZXkvdmFsdWUgcGFpcnMgYW5kIHJldHVybiBhcyBhbiBvYmplY3RcbiAgICovXG4gIGFzeW5jIGdldEFsbCgpIHtcbiAgICBsZXQgb3V0cHV0ID0ge307XG4gICAgZm9yIChjb25zdCBrZXkgb2YgYXdhaXQgdGhpcy5saXN0KCkpIHtcbiAgICAgIGxldCB2YWx1ZSA9IGF3YWl0IHRoaXMuZ2V0KGtleSk7XG4gICAgICBvdXRwdXRba2V5XSA9IHZhbHVlO1xuICAgIH1cbiAgICByZXR1cm4gb3V0cHV0O1xuICB9XG5cbiAgLyoqXG4gICAqIFNldHMgdGhlIGVudGlyZSBkYXRhYmFzZSB0aHJvdWdoIGFuIG9iamVjdC5cbiAgICogQHBhcmFtIHtPYmplY3R9IG9iaiBUaGUgb2JqZWN0LlxuICAgKi9cbiAgYXN5bmMgc2V0QWxsKG9iaikge1xuICAgIGZvciAoY29uc3Qga2V5IGluIG9iaikge1xuICAgICAgbGV0IHZhbCA9IG9ialtrZXldO1xuICAgICAgYXdhaXQgdGhpcy5zZXQoa2V5LCB2YWwpO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIC8qKlxuICAgKiBEZWxldGUgbXVsdGlwbGUgZW50cmllcyBieSBrZXlzXG4gICAqIEBwYXJhbSB7QXJyYXk8c3RyaW5nPn0gYXJncyBLZXlzXG4gICAqL1xuICBhc3luYyBkZWxldGVNdWx0aXBsZSguLi5hcmdzKSB7XG4gICAgY29uc3QgcHJvbWlzZXMgPSBbXTtcblxuICAgIGZvciAoY29uc3QgYXJnIG9mIGFyZ3MpIHtcbiAgICAgIHByb21pc2VzLnB1c2godGhpcy5kZWxldGUoYXJnKSk7XG4gICAgfVxuXG4gICAgYXdhaXQgUHJvbWlzZS5hbGwocHJvbWlzZXMpO1xuXG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBDbGllbnQ7XG5cbmZ1bmN0aW9uIGdldEtleSgpIHtcbiAgdHJ5IHtcbiAgICByZXR1cm4gZnMucmVhZEZpbGVTeW5jKHJlcGxpdERCRmlsZW5hbWUsIFwidXRmOFwiKTtcbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgcmV0dXJuIHByb2Nlc3MuZW52LlJFUExJVF9EQl9VUkw7XG4gIH1cbn0iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@replit/database/index.js\n");

/***/ })

};
;